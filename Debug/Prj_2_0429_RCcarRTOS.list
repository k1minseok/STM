
Prj_2_0429_RCcarRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007658  08007658  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007660  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004408  2000006c  080076cc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004474  080076cc  00009474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001902f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4a  00000000  00000000  000220cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00026018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119c  00000000  00000000  000276d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae5d  00000000  00000000  00028874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d83a  00000000  00000000  000436d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd55  00000000  00000000  00060f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcc60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f0  00000000  00000000  000fcca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00103194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007450 	.word	0x08007450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007450 	.word	0x08007450

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <AP_Main_init>:


void AP_Main_init(UART_HandleTypeDef *inHuart,
		TIM_HandleTypeDef *motor_inHtim,
		TIM_HandleTypeDef *UltraLeft_inHtim, TIM_HandleTypeDef *UltraCenter_inHtim, TIM_HandleTypeDef *UltraRight_inHtim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
	DelayInit();
 800059e:	f000 fc15 	bl	8000dcc <DelayInit>
	Que_Car_init();
 80005a2:	f000 facb 	bl	8000b3c <Que_Car_init>
	Listener_init();
 80005a6:	f000 f94d 	bl	8000844 <Listener_init>
	Model_hardwareinit(inHuart, motor_inHtim, UltraLeft_inHtim, UltraCenter_inHtim, UltraRight_inHtim);
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f000 faf5 	bl	8000ba4 <Model_hardwareinit>
	Controller_Car_init();
 80005ba:	f000 f80d 	bl	80005d8 <Controller_Car_init>
//
//	HAL_UART_Receive_IT(inHuart, &rcvData, 1);
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <AP_Main_execute>:
void AP_Main_execute()
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
	Listener_CarMode_EventCheck();
 80005ca:	f000 f947 	bl	800085c <Listener_CarMode_EventCheck>
	Controller_Car_execute();
 80005ce:	f000 f81b 	bl	8000608 <Controller_Car_execute>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <Controller_Car_init>:
 * 1. Motor : speed & action(forward, back, ...)
 * 2. UART : output data
 */

void Controller_Car_init()
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	prevCarModeState = OFF;
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <Controller_Car_init+0x24>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]

	MotorSpeed = 1000;
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <Controller_Car_init+0x28>)
 80005e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005e8:	801a      	strh	r2, [r3, #0]
	turnDiffSpeed = 1000;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <Controller_Car_init+0x2c>)
 80005ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f0:	801a      	strh	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000088 	.word	0x20000088
 8000600:	2000008a 	.word	0x2000008a
 8000604:	2000008c 	.word	0x2000008c

08000608 <Controller_Car_execute>:

void Controller_Car_execute()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t curCarModeState = Model_getCarModeState();
 800060e:	f000 fb33 	bl	8000c78 <Model_getCarModeState>
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	//uint8_t curCarModeState = LEFT_FORWARD;
	//curCarModeState = RIGHT_FORWARD;
	if(prevCarModeState == curCarModeState) return;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <Controller_Car_execute+0x90>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	429a      	cmp	r2, r3
 800061e:	d036      	beq.n	800068e <Controller_Car_execute+0x86>

	switch (curCarModeState)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b04      	cmp	r3, #4
 8000624:	d82f      	bhi.n	8000686 <Controller_Car_execute+0x7e>
 8000626:	a201      	add	r2, pc, #4	@ (adr r2, 800062c <Controller_Car_execute+0x24>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000641 	.word	0x08000641
 8000630:	08000647 	.word	0x08000647
 8000634:	08000653 	.word	0x08000653
 8000638:	0800065f 	.word	0x0800065f
 800063c:	08000673 	.word	0x08000673
	{
		case OFF:
			//stopMode();
			Controller_CarOFF_Run();
 8000640:	f000 f830 	bl	80006a4 <Controller_CarOFF_Run>
			break;
 8000644:	e01f      	b.n	8000686 <Controller_Car_execute+0x7e>

		case FORWARD:
			Controller_CarForward_Run(MotorSpeed);
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <Controller_Car_execute+0x94>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f843 	bl	80006d6 <Controller_CarForward_Run>
			break;
 8000650:	e019      	b.n	8000686 <Controller_Car_execute+0x7e>

		case BACKWARD:
			Controller_CarBackward_Run(MotorSpeed);
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <Controller_Car_execute+0x94>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f861 	bl	800071e <Controller_CarBackward_Run>
			break;
 800065c:	e013      	b.n	8000686 <Controller_Car_execute+0x7e>

		case RIGHT_FORWARD:
			Controller_CarRightForward_Run(MotorSpeed, turnDiffSpeed);
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <Controller_Car_execute+0x94>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <Controller_Car_execute+0x98>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	4610      	mov	r0, r2
 800066c:	f000 f87b 	bl	8000766 <Controller_CarRightForward_Run>
			break;
 8000670:	e009      	b.n	8000686 <Controller_Car_execute+0x7e>

		case LEFT_FORWARD:
			Controller_CarLeftForward_Run(MotorSpeed, turnDiffSpeed);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <Controller_Car_execute+0x94>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <Controller_Car_execute+0x98>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	4610      	mov	r0, r2
 8000680:	f000 f899 	bl	80007b6 <Controller_CarLeftForward_Run>
			break;
 8000684:	bf00      	nop
	}
	prevCarModeState = curCarModeState;
 8000686:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <Controller_Car_execute+0x90>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	e000      	b.n	8000690 <Controller_Car_execute+0x88>
	if(prevCarModeState == curCarModeState) return;
 800068e:	bf00      	nop
}
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000088 	.word	0x20000088
 800069c:	2000008a 	.word	0x2000008a
 80006a0:	2000008c 	.word	0x2000008c

080006a4 <Controller_CarOFF_Run>:

void Controller_CarOFF_Run()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	Motor_SetSpeed(&(Model_getHandleMotor()->hLeftMotor), 0);
 80006a8:	f000 fac6 	bl	8000c38 <Model_getHandleMotor>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fc34 	bl	8000f1e <Motor_SetSpeed>
	Motor_SetSpeed(&(Model_getHandleMotor()->hRightMotor), 0);
 80006b6:	f000 fabf 	bl	8000c38 <Model_getHandleMotor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	3318      	adds	r3, #24
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fc2c 	bl	8000f1e <Motor_SetSpeed>
	Presenter_Motor_Run(OFF);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f98e 	bl	80009e8 <Presenter_Motor_Run>
	Presenter_UART_Run(OFF);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f9eb 	bl	8000aa8 <Presenter_UART_Run>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <Controller_CarForward_Run>:
void Controller_CarForward_Run(int speedVal)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	if(speedVal > 1000) speedVal = 1000;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006e4:	dd02      	ble.n	80006ec <Controller_CarForward_Run+0x16>
 80006e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ea:	607b      	str	r3, [r7, #4]
	Motor_SetSpeed(&(Model_getHandleMotor()->hLeftMotor), speedVal);
 80006ec:	f000 faa4 	bl	8000c38 <Model_getHandleMotor>
 80006f0:	4603      	mov	r3, r0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc12 	bl	8000f1e <Motor_SetSpeed>
	Motor_SetSpeed(&(Model_getHandleMotor()->hRightMotor), speedVal);
 80006fa:	f000 fa9d 	bl	8000c38 <Model_getHandleMotor>
 80006fe:	4603      	mov	r3, r0
 8000700:	3318      	adds	r3, #24
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fc0a 	bl	8000f1e <Motor_SetSpeed>
	Presenter_Motor_Run(FORWARD);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f96c 	bl	80009e8 <Presenter_Motor_Run>
	Presenter_UART_Run(FORWARD);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 f9c9 	bl	8000aa8 <Presenter_UART_Run>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Controller_CarBackward_Run>:
void Controller_CarBackward_Run(int speedVal)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	if(speedVal > 1000) speedVal = 1000;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800072c:	dd02      	ble.n	8000734 <Controller_CarBackward_Run+0x16>
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	607b      	str	r3, [r7, #4]
	Motor_SetSpeed(&(Model_getHandleMotor()->hLeftMotor), speedVal);
 8000734:	f000 fa80 	bl	8000c38 <Model_getHandleMotor>
 8000738:	4603      	mov	r3, r0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fbee 	bl	8000f1e <Motor_SetSpeed>
	Motor_SetSpeed(&(Model_getHandleMotor()->hRightMotor), speedVal);
 8000742:	f000 fa79 	bl	8000c38 <Model_getHandleMotor>
 8000746:	4603      	mov	r3, r0
 8000748:	3318      	adds	r3, #24
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fbe6 	bl	8000f1e <Motor_SetSpeed>
	Presenter_Motor_Run(BACKWARD);
 8000752:	2002      	movs	r0, #2
 8000754:	f000 f948 	bl	80009e8 <Presenter_Motor_Run>
	Presenter_UART_Run(BACKWARD);
 8000758:	2002      	movs	r0, #2
 800075a:	f000 f9a5 	bl	8000aa8 <Presenter_UART_Run>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <Controller_CarRightForward_Run>:
void Controller_CarRightForward_Run(int speedVal, int speedDif)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
	if(speedVal > 1000) speedVal = 1000;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000776:	dd02      	ble.n	800077e <Controller_CarRightForward_Run+0x18>
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	607b      	str	r3, [r7, #4]
	//if((speedVal+speedDif) > 1000) speedVal = 1000-speedDif;
	Motor_SetSpeed(&(Model_getHandleMotor()->hLeftMotor), speedVal);
 800077e:	f000 fa5b 	bl	8000c38 <Model_getHandleMotor>
 8000782:	4603      	mov	r3, r0
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fbc9 	bl	8000f1e <Motor_SetSpeed>
	Motor_SetSpeed(&(Model_getHandleMotor()->hRightMotor), speedVal-speedDif);
 800078c:	f000 fa54 	bl	8000c38 <Model_getHandleMotor>
 8000790:	4603      	mov	r3, r0
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	4619      	mov	r1, r3
 800079e:	f000 fbbe 	bl	8000f1e <Motor_SetSpeed>
	Presenter_Motor_Run(RIGHT_FORWARD);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 f920 	bl	80009e8 <Presenter_Motor_Run>
	Presenter_UART_Run(RIGHT_FORWARD);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f97d 	bl	8000aa8 <Presenter_UART_Run>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <Controller_CarLeftForward_Run>:
void Controller_CarLeftForward_Run(int speedVal, int speedDif)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	if(speedVal > 1000) speedVal = 1000;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007c6:	dd02      	ble.n	80007ce <Controller_CarLeftForward_Run+0x18>
 80007c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007cc:	607b      	str	r3, [r7, #4]
	//if(speedVal<speedDif) speedVal = 1000-speedDif;
	Motor_SetSpeed(&(Model_getHandleMotor()->hLeftMotor), speedVal-speedDif);
 80007ce:	f000 fa33 	bl	8000c38 <Model_getHandleMotor>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4618      	mov	r0, r3
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	f000 fb9e 	bl	8000f1e <Motor_SetSpeed>
	Motor_SetSpeed(&(Model_getHandleMotor()->hRightMotor), speedVal);
 80007e2:	f000 fa29 	bl	8000c38 <Model_getHandleMotor>
 80007e6:	4603      	mov	r3, r0
 80007e8:	3318      	adds	r3, #24
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb96 	bl	8000f1e <Motor_SetSpeed>
	Presenter_Motor_Run(LEFT_FORWARD);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f000 f8f8 	bl	80009e8 <Presenter_Motor_Run>
	Presenter_UART_Run(LEFT_FORWARD);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 f955 	bl	8000aa8 <Presenter_UART_Run>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <Listener_ISR_Process>:
 * 1. Receive a string via UART to decide modeState & save in Model
 *
 */

void Listener_ISR_Process(uint8_t rcvData)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	if(rcvData == '\n')			// Check the last char in a string
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b0a      	cmp	r3, #10
 8000816:	d109      	bne.n	800082c <Listener_ISR_Process+0x24>
	{
		rxFlag = 1;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <Listener_ISR_Process+0x34>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
		printf("rxFlag : %d  rxCmplt\n", rxFlag);		// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <Listener_ISR_Process+0x34>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	4806      	ldr	r0, [pc, #24]	@ (8000840 <Listener_ISR_Process+0x38>)
 8000826:	f005 ff47 	bl	80066b8 <iprintf>
		return;								// for not save '\n'
 800082a:	e003      	b.n	8000834 <Listener_ISR_Process+0x2c>
	}
	enQue_CarModeState(rcvData);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f98e 	bl	8000b50 <enQue_CarModeState>
}
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000a6 	.word	0x200000a6
 8000840:	08007468 	.word	0x08007468

08000844 <Listener_init>:

void Listener_init()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	CarModeState_Li = OFF;
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <Listener_init+0x14>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	Listener_clearModeBuf();
 800084e:	f000 f8b1 	bl	80009b4 <Listener_clearModeBuf>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000a5 	.word	0x200000a5

0800085c <Listener_CarMode_EventCheck>:

void Listener_CarMode_EventCheck()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	if(!rxFlag) return;			// Execute only one time when received on UART
 8000862:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <Listener_CarMode_EventCheck+0x124>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8085 	beq.w	8000976 <Listener_CarMode_EventCheck+0x11a>

  uint8_t ch = deQue_CarModeState();
 800086c:	f000 f980 	bl	8000b70 <deQue_CarModeState>
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
	if(ch)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d013      	beq.n	80008a2 <Listener_CarMode_EventCheck+0x46>
	{
		static int iii = 0;								// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
		printf("%d   %c\n", iii++, ch);		// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
 800087a:	4b42      	ldr	r3, [pc, #264]	@ (8000984 <Listener_CarMode_EventCheck+0x128>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	4940      	ldr	r1, [pc, #256]	@ (8000984 <Listener_CarMode_EventCheck+0x128>)
 8000882:	600a      	str	r2, [r1, #0]
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	4619      	mov	r1, r3
 8000888:	483f      	ldr	r0, [pc, #252]	@ (8000988 <Listener_CarMode_EventCheck+0x12c>)
 800088a:	f005 ff15 	bl	80066b8 <iprintf>
		CarModeBuf[index_carmodebuf++] = ch;
 800088e:	4b3f      	ldr	r3, [pc, #252]	@ (800098c <Listener_CarMode_EventCheck+0x130>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	b2d1      	uxtb	r1, r2
 8000896:	4a3d      	ldr	r2, [pc, #244]	@ (800098c <Listener_CarMode_EventCheck+0x130>)
 8000898:	7011      	strb	r1, [r2, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4a3c      	ldr	r2, [pc, #240]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	5453      	strb	r3, [r2, r1]
	}

	if (strcmp(CarModeBuf, "OFF") == 0)
 80008a2:	493c      	ldr	r1, [pc, #240]	@ (8000994 <Listener_CarMode_EventCheck+0x138>)
 80008a4:	483a      	ldr	r0, [pc, #232]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 80008a6:	f7ff fc9b 	bl	80001e0 <strcmp>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <Listener_CarMode_EventCheck+0x6e>
	{
		CarModeState_Li = OFF;
 80008b0:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 80008b6:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f9e8 	bl	8000c90 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 80008c0:	4933      	ldr	r1, [pc, #204]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 80008c2:	4836      	ldr	r0, [pc, #216]	@ (800099c <Listener_CarMode_EventCheck+0x140>)
 80008c4:	f005 fef8 	bl	80066b8 <iprintf>
 80008c8:	e046      	b.n	8000958 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "FORW") == 0)
 80008ca:	4935      	ldr	r1, [pc, #212]	@ (80009a0 <Listener_CarMode_EventCheck+0x144>)
 80008cc:	4830      	ldr	r0, [pc, #192]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 80008ce:	f7ff fc87 	bl	80001e0 <strcmp>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10c      	bne.n	80008f2 <Listener_CarMode_EventCheck+0x96>
	{
		CarModeState_Li = FORWARD;
 80008d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f9d4 	bl	8000c90 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 80008e8:	4929      	ldr	r1, [pc, #164]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 80008ea:	482c      	ldr	r0, [pc, #176]	@ (800099c <Listener_CarMode_EventCheck+0x140>)
 80008ec:	f005 fee4 	bl	80066b8 <iprintf>
 80008f0:	e032      	b.n	8000958 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "BACK") == 0)
 80008f2:	492c      	ldr	r1, [pc, #176]	@ (80009a4 <Listener_CarMode_EventCheck+0x148>)
 80008f4:	4826      	ldr	r0, [pc, #152]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 80008f6:	f7ff fc73 	bl	80001e0 <strcmp>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10c      	bne.n	800091a <Listener_CarMode_EventCheck+0xbe>
	{
		CarModeState_Li = BACKWARD;
 8000900:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 8000902:	2202      	movs	r2, #2
 8000904:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 8000906:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f9c0 	bl	8000c90 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 8000910:	491f      	ldr	r1, [pc, #124]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 8000912:	4822      	ldr	r0, [pc, #136]	@ (800099c <Listener_CarMode_EventCheck+0x140>)
 8000914:	f005 fed0 	bl	80066b8 <iprintf>
 8000918:	e01e      	b.n	8000958 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "RIGHT") == 0)
 800091a:	4923      	ldr	r1, [pc, #140]	@ (80009a8 <Listener_CarMode_EventCheck+0x14c>)
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 800091e:	f7ff fc5f 	bl	80001e0 <strcmp>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d108      	bne.n	800093a <Listener_CarMode_EventCheck+0xde>
	{
		CarModeState_Li = RIGHT_FORWARD;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 800092a:	2203      	movs	r2, #3
 800092c:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f9ac 	bl	8000c90 <Model_setCarModeState>
 8000938:	e00e      	b.n	8000958 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "LEFT") == 0)
 800093a:	491c      	ldr	r1, [pc, #112]	@ (80009ac <Listener_CarMode_EventCheck+0x150>)
 800093c:	4814      	ldr	r0, [pc, #80]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 800093e:	f7ff fc4f 	bl	80001e0 <strcmp>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d107      	bne.n	8000958 <Listener_CarMode_EventCheck+0xfc>
	{
		CarModeState_Li = LEFT_FORWARD;
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 800094a:	2204      	movs	r2, #4
 800094c:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <Listener_CarMode_EventCheck+0x13c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f99c 	bl	8000c90 <Model_setCarModeState>
	}

	if(Que_Car_isEmpty())
 8000958:	f000 f91a 	bl	8000b90 <Que_Car_isEmpty>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00a      	beq.n	8000978 <Listener_CarMode_EventCheck+0x11c>
	{
		printf("Buffer : %s  queEmpty\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 8000962:	490b      	ldr	r1, [pc, #44]	@ (8000990 <Listener_CarMode_EventCheck+0x134>)
 8000964:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <Listener_CarMode_EventCheck+0x154>)
 8000966:	f005 fea7 	bl	80066b8 <iprintf>
		rxFlag = 0;
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <Listener_CarMode_EventCheck+0x124>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
		Listener_clearModeBuf();
 8000970:	f000 f820 	bl	80009b4 <Listener_clearModeBuf>
 8000974:	e000      	b.n	8000978 <Listener_CarMode_EventCheck+0x11c>
	if(!rxFlag) return;			// Execute only one time when received on UART
 8000976:	bf00      	nop
	}
}
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000a6 	.word	0x200000a6
 8000984:	200000a8 	.word	0x200000a8
 8000988:	08007480 	.word	0x08007480
 800098c:	200000a4 	.word	0x200000a4
 8000990:	20000090 	.word	0x20000090
 8000994:	0800748c 	.word	0x0800748c
 8000998:	200000a5 	.word	0x200000a5
 800099c:	08007490 	.word	0x08007490
 80009a0:	080074ac 	.word	0x080074ac
 80009a4:	080074b4 	.word	0x080074b4
 80009a8:	080074bc 	.word	0x080074bc
 80009ac:	080074c4 	.word	0x080074c4
 80009b0:	080074cc 	.word	0x080074cc

080009b4 <Listener_clearModeBuf>:

void Listener_clearModeBuf()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	memset(CarModeBuf, '\0', 20);
 80009b8:	2214      	movs	r2, #20
 80009ba:	2100      	movs	r1, #0
 80009bc:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <Listener_clearModeBuf+0x24>)
 80009be:	f005 ffc3 	bl	8006948 <memset>
	index_carmodebuf = 0;
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <Listener_clearModeBuf+0x28>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	printf("ClearBuffer\n");		// for debug---------------
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <Listener_clearModeBuf+0x2c>)
 80009ca:	f005 fedd 	bl	8006788 <puts>
	printf("--------------------------\n");
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <Listener_clearModeBuf+0x30>)
 80009d0:	f005 feda 	bl	8006788 <puts>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000090 	.word	0x20000090
 80009dc:	200000a4 	.word	0x200000a4
 80009e0:	080074e4 	.word	0x080074e4
 80009e4:	080074f0 	.word	0x080074f0

080009e8 <Presenter_Motor_Run>:
 * 2. Motor : Forward, Back, ...
 *
 */

void Presenter_Motor_Run(uint8_t state)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d853      	bhi.n	8000aa0 <Presenter_Motor_Run+0xb8>
 80009f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000a00 <Presenter_Motor_Run+0x18>)
 80009fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fe:	bf00      	nop
 8000a00:	08000a15 	.word	0x08000a15
 8000a04:	08000a31 	.word	0x08000a31
 8000a08:	08000a4d 	.word	0x08000a4d
 8000a0c:	08000a69 	.word	0x08000a69
 8000a10:	08000a85 	.word	0x08000a85
	{
		case OFF:
			Motor_Stop(&(Model_getHandleMotor()->hLeftMotor));
 8000a14:	f000 f910 	bl	8000c38 <Model_getHandleMotor>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fa1f 	bl	8000e5e <Motor_Stop>
			Motor_Stop(&(Model_getHandleMotor()->hRightMotor));
 8000a20:	f000 f90a 	bl	8000c38 <Model_getHandleMotor>
 8000a24:	4603      	mov	r3, r0
 8000a26:	3318      	adds	r3, #24
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fa18 	bl	8000e5e <Motor_Stop>
			break;
 8000a2e:	e037      	b.n	8000aa0 <Presenter_Motor_Run+0xb8>

		case FORWARD:
			Motor_Forward(&(Model_getHandleMotor()->hLeftMotor));
 8000a30:	f000 f902 	bl	8000c38 <Model_getHandleMotor>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fa31 	bl	8000e9e <Motor_Forward>
			Motor_Forward(&(Model_getHandleMotor()->hRightMotor));
 8000a3c:	f000 f8fc 	bl	8000c38 <Model_getHandleMotor>
 8000a40:	4603      	mov	r3, r0
 8000a42:	3318      	adds	r3, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fa2a 	bl	8000e9e <Motor_Forward>
			break;
 8000a4a:	e029      	b.n	8000aa0 <Presenter_Motor_Run+0xb8>

		case BACKWARD:
			Motor_Backward(&(Model_getHandleMotor()->hLeftMotor));
 8000a4c:	f000 f8f4 	bl	8000c38 <Model_getHandleMotor>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fa43 	bl	8000ede <Motor_Backward>
			Motor_Backward(&(Model_getHandleMotor()->hRightMotor));
 8000a58:	f000 f8ee 	bl	8000c38 <Model_getHandleMotor>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	3318      	adds	r3, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fa3c 	bl	8000ede <Motor_Backward>
			break;
 8000a66:	e01b      	b.n	8000aa0 <Presenter_Motor_Run+0xb8>

		case RIGHT_FORWARD:
			Motor_Forward(&(Model_getHandleMotor()->hLeftMotor));
 8000a68:	f000 f8e6 	bl	8000c38 <Model_getHandleMotor>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fa15 	bl	8000e9e <Motor_Forward>
			Motor_Forward(&(Model_getHandleMotor()->hRightMotor));
 8000a74:	f000 f8e0 	bl	8000c38 <Model_getHandleMotor>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fa0e 	bl	8000e9e <Motor_Forward>
			break;
 8000a82:	e00d      	b.n	8000aa0 <Presenter_Motor_Run+0xb8>

		case LEFT_FORWARD:
			Motor_Forward(&(Model_getHandleMotor()->hLeftMotor));
 8000a84:	f000 f8d8 	bl	8000c38 <Model_getHandleMotor>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa07 	bl	8000e9e <Motor_Forward>
			Motor_Forward(&(Model_getHandleMotor()->hRightMotor));
 8000a90:	f000 f8d2 	bl	8000c38 <Model_getHandleMotor>
 8000a94:	4603      	mov	r3, r0
 8000a96:	3318      	adds	r3, #24
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa00 	bl	8000e9e <Motor_Forward>
			break;
 8000a9e:	bf00      	nop
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Presenter_UART_Run>:

void Presenter_UART_Run(uint8_t state)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d830      	bhi.n	8000b1a <Presenter_UART_Run+0x72>
 8000ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <Presenter_UART_Run+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae3 	.word	0x08000ae3
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	08000aff 	.word	0x08000aff
 8000ad0:	08000b0d 	.word	0x08000b0d
	{
		case OFF:
			printf("Mode : OFF\n");
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <Presenter_UART_Run+0x7c>)
 8000ad6:	f005 fe57 	bl	8006788 <puts>
			printf("--------------------------\n");
 8000ada:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000adc:	f005 fe54 	bl	8006788 <puts>
			break;
 8000ae0:	e01b      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case FORWARD:
			printf("Mode : Forward\n");
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <Presenter_UART_Run+0x84>)
 8000ae4:	f005 fe50 	bl	8006788 <puts>
			printf("--------------------------\n");
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000aea:	f005 fe4d 	bl	8006788 <puts>
			break;
 8000aee:	e014      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case BACKWARD:
			printf("Mode : Backward\n");
 8000af0:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <Presenter_UART_Run+0x88>)
 8000af2:	f005 fe49 	bl	8006788 <puts>
			printf("--------------------------\n");
 8000af6:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000af8:	f005 fe46 	bl	8006788 <puts>
			break;
 8000afc:	e00d      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case RIGHT_FORWARD:
			printf("Mode : RightForward\n");
 8000afe:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <Presenter_UART_Run+0x8c>)
 8000b00:	f005 fe42 	bl	8006788 <puts>
			printf("--------------------------\n");
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000b06:	f005 fe3f 	bl	8006788 <puts>
			break;
 8000b0a:	e006      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case LEFT_FORWARD:
			printf("Mode : LeftForward\n");
 8000b0c:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <Presenter_UART_Run+0x90>)
 8000b0e:	f005 fe3b 	bl	8006788 <puts>
			printf("--------------------------\n");
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000b14:	f005 fe38 	bl	8006788 <puts>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	0800750c 	.word	0x0800750c
 8000b28:	08007518 	.word	0x08007518
 8000b2c:	08007534 	.word	0x08007534
 8000b30:	08007544 	.word	0x08007544
 8000b34:	08007554 	.word	0x08007554
 8000b38:	08007568 	.word	0x08007568

08000b3c <Que_Car_init>:
 */

Que_t carmodeQue;

void Que_Car_init()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	Que_init(&carmodeQue);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <Que_Car_init+0x10>)
 8000b42:	f000 f8b5 	bl	8000cb0 <Que_init>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000ac 	.word	0x200000ac

08000b50 <enQue_CarModeState>:

void enQue_CarModeState(uint8_t data)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	enQue(&carmodeQue, data);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <enQue_CarModeState+0x1c>)
 8000b60:	f000 f8dc 	bl	8000d1c <enQue>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000ac 	.word	0x200000ac

08000b70 <deQue_CarModeState>:

uint8_t deQue_CarModeState()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t temp = deQue(&carmodeQue);
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <deQue_CarModeState+0x1c>)
 8000b78:	f000 f8fc 	bl	8000d74 <deQue>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]

	return temp;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000ac 	.word	0x200000ac

08000b90 <Que_Car_isEmpty>:

int Que_Car_isEmpty()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	return QueEmpty(&carmodeQue);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <Que_Car_isEmpty+0x10>)
 8000b96:	f000 f8af 	bl	8000cf8 <QueEmpty>
 8000b9a:	4603      	mov	r3, r0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000ac 	.word	0x200000ac

08000ba4 <Model_hardwareinit>:


void Model_hardwareinit(UART_HandleTypeDef *inHuart,
		TIM_HandleTypeDef *motor_inHtim,
		TIM_HandleTypeDef *UltraLeft_inHtim, TIM_HandleTypeDef *UltraCenter_inHtim, TIM_HandleTypeDef *UltraRight_inHtim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
	DevHandler.myHuart = inHuart;
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <Model_hardwareinit+0x68>)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6013      	str	r3, [r2, #0]
	DevHandler.motor_htim = motor_inHtim;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <Model_hardwareinit+0x68>)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	6053      	str	r3, [r2, #4]
	DevHandler.UltraLeft_htim = UltraLeft_inHtim;
 8000bbe:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <Model_hardwareinit+0x68>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6113      	str	r3, [r2, #16]
	DevHandler.UltraCenter_htim = UltraCenter_inHtim;
 8000bc4:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <Model_hardwareinit+0x68>)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	60d3      	str	r3, [r2, #12]
	DevHandler.UltraRight_htim = UltraRight_inHtim;
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <Model_hardwareinit+0x68>)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	6093      	str	r3, [r2, #8]


	Motor_init(&(com_hMotor.hLeftMotor), motor_inHtim, TIM_CHANNEL_1, LEFT_DIR1_Port,
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <Model_hardwareinit+0x6c>)
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <Model_hardwareinit+0x70>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <Model_hardwareinit+0x74>)
 8000be4:	f000 f91c 	bl	8000e20 <Motor_init>
			LEFT_DIR1_Port_Pin, LEFT_DIR2_Port, LEFT_DIR2_Port_Pin);
	Motor_init(&(com_hMotor.hRightMotor), motor_inHtim, TIM_CHANNEL_2, RIGHT_DIR1_Port,
 8000be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <Model_hardwareinit+0x6c>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Model_hardwareinit+0x78>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <Model_hardwareinit+0x7c>)
 8000c00:	f000 f90e 	bl	8000e20 <Motor_init>
			RIGHT_DIR1_Port_Pin, RIGHT_DIR2_Port, RIGHT_DIR2_Port_Pin);
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000011c 	.word	0x2000011c
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020800 	.word	0x40020800
 8000c18:	20000130 	.word	0x20000130
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	20000148 	.word	0x20000148

08000c24 <Model_getHandler>:

handler_t *Model_getHandler()
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	return &DevHandler;
 8000c28:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <Model_getHandler+0x10>)
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	2000011c 	.word	0x2000011c

08000c38 <Model_getHandleMotor>:

com_hMotor_t *Model_getHandleMotor()
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	return &com_hMotor;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	@ (8000c48 <Model_getHandleMotor+0x10>)
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000130 	.word	0x20000130

08000c4c <_write>:


int _write(int file, char *ptr, int len)		// for printf() function
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(DevHandler.myHuart, (uint8_t*) ptr, len, 1000);
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <_write+0x28>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	f003 f9fd 	bl	8004064 <HAL_UART_Transmit>

	return len;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000011c 	.word	0x2000011c

08000c78 <Model_getCarModeState>:


uint8_t Model_getCarModeState()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	return CarModeState_Mo;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <Model_getCarModeState+0x14>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000160 	.word	0x20000160

08000c90 <Model_setCarModeState>:
void Model_setCarModeState(uint8_t data)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	CarModeState_Mo = data;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <Model_setCarModeState+0x1c>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	7013      	strb	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20000160 	.word	0x20000160

08000cb0 <Que_init>:
 */

#include "Queue.h"

void Que_init(Que_t *Que)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	669a      	str	r2, [r3, #104]	@ 0x68
	Que->tail = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	665a      	str	r2, [r3, #100]	@ 0x64
	Que->QueCounter = 0;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <QueFull>:

uint8_t QueFull(Que_t *Que)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ce2:	2b64      	cmp	r3, #100	@ 0x64
 8000ce4:	d101      	bne.n	8000cea <QueFull+0x14>
		return 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <QueFull+0x16>
	else
		return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <QueEmpty>:
uint8_t QueEmpty(Que_t *Que)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <QueEmpty+0x14>
		return 1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <QueEmpty+0x16>
	else
		return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffd4 	bl	8000cd6 <QueFull>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d119      	bne.n	8000d68 <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	78f9      	ldrb	r1, [r7, #3]
 8000d3c:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <enQue+0x54>)
 8000d46:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4a:	1159      	asrs	r1, r3, #5
 8000d4c:	17d3      	asrs	r3, r2, #31
 8000d4e:	1acb      	subs	r3, r1, r3
 8000d50:	2164      	movs	r1, #100	@ 0x64
 8000d52:	fb01 f303 	mul.w	r3, r1, r3
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6653      	str	r3, [r2, #100]	@ 0x64
	Que->QueCounter++;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d66:	e000      	b.n	8000d6a <enQue+0x4e>
	if(QueFull(Que)) return;
 8000d68:	bf00      	nop
}
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	51eb851f 	.word	0x51eb851f

08000d74 <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return 0;
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffbb 	bl	8000cf8 <QueEmpty>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <deQue+0x18>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e019      	b.n	8000dc0 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <deQue+0x54>)
 8000d9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000da2:	1159      	asrs	r1, r3, #5
 8000da4:	17d3      	asrs	r3, r2, #31
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	2164      	movs	r1, #100	@ 0x64
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6693      	str	r3, [r2, #104]	@ 0x68
	Que->QueCounter--;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

	return temp;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	51eb851f 	.word	0x51eb851f

08000dcc <DelayInit>:

#include "delayUS.h"


void DelayInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <DelayInit+0x4c>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <DelayInit+0x4c>)
 8000dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dda:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <DelayInit+0x4c>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <DelayInit+0x4c>)
 8000de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000de6:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <DelayInit+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <DelayInit+0x50>)
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000df4:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <DelayInit+0x50>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <DelayInit+0x50>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <DelayInit+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000e06:	bf00      	nop
	__ASM volatile ("NOP");
 8000e08:	bf00      	nop
	__ASM volatile ("NOP");
 8000e0a:	bf00      	nop
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000edf0 	.word	0xe000edf0
 8000e1c:	e0001000 	.word	0xe0001000

08000e20 <Motor_init>:
void Motor_init(Motor_t *Motor,
			TIM_HandleTypeDef *htim,
			uint32_t Channel,
			GPIO_TypeDef *Dir1_GPIO, uint16_t Dir1_GPIO_Pin,
			GPIO_TypeDef *Dir2_GPIO, uint16_t Dir2_GPIO_Pin)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
	Motor->htim = htim;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	601a      	str	r2, [r3, #0]
	Motor->Channel = Channel;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	605a      	str	r2, [r3, #4]
	Motor->Dir1_GPIO = Dir1_GPIO;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	609a      	str	r2, [r3, #8]
	Motor->Dir1_GPIO_Pin = Dir1_GPIO_Pin;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	8b3a      	ldrh	r2, [r7, #24]
 8000e44:	819a      	strh	r2, [r3, #12]
	Motor->Dir2_GPIO = Dir2_GPIO;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	611a      	str	r2, [r3, #16]
	Motor->Dir2_GPIO_Pin = Dir2_GPIO_Pin;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8c3a      	ldrh	r2, [r7, #32]
 8000e50:	829a      	strh	r2, [r3, #20]

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <Motor_Stop>:
void Motor_Stop(Motor_t *Motor)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, RESET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6898      	ldr	r0, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	899b      	ldrh	r3, [r3, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	f001 fa49 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, RESET);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6918      	ldr	r0, [r3, #16]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8a9b      	ldrh	r3, [r3, #20]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f001 fa41 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f002 fa37 	bl	8003304 <HAL_TIM_PWM_Stop>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <Motor_Forward>:
void Motor_Forward(Motor_t *Motor)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, RESET);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6898      	ldr	r0, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f001 fa29 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, SET);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6918      	ldr	r0, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	8a9b      	ldrh	r3, [r3, #20]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f001 fa21 	bl	8002308 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	f002 f967 	bl	80031a4 <HAL_TIM_PWM_Start>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <Motor_Backward>:
void Motor_Backward(Motor_t *Motor)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, SET);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6898      	ldr	r0, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	899b      	ldrh	r3, [r3, #12]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f001 fa09 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, RESET);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6918      	ldr	r0, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	8a9b      	ldrh	r3, [r3, #20]
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	f001 fa01 	bl	8002308 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f002 f947 	bl	80031a4 <HAL_TIM_PWM_Start>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_t *Motor, int speedVal)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <Motor_SetSpeed+0x1e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f3a:	e018      	b.n	8000f6e <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d105      	bne.n	8000f50 <Motor_SetSpeed+0x32>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f4e:	e00e      	b.n	8000f6e <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d105      	bne.n	8000f64 <Motor_SetSpeed+0x46>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f62:	e004      	b.n	8000f6e <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <vApplicationGetIdleTaskMemory+0x30>)
 8000f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000164 	.word	0x20000164
 8000fac:	200001b8 	.word	0x200001b8

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b096      	sub	sp, #88	@ 0x58
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 fe6d 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f857 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f000 fa5d 	bl	800147c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc2:	f000 f8bb 	bl	800113c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000fc6:	f000 f983 	bl	80012d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 fa2d 	bl	8001428 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fce:	f000 f8e3 	bl	8001198 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fd2:	f000 f931 	bl	8001238 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000fd6:	f000 f9fd 	bl	80013d4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <main+0xa4>)
 8000fdc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 f85a 	bl	80050ae <osThreadCreate>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a16      	ldr	r2, [pc, #88]	@ (8001058 <main+0xa8>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* definition and creation of listenerTask */
  osThreadDef(listenerTask, ListenerTask, osPriorityIdle, 0, 128);
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <main+0xac>)
 8001002:	f107 0420 	add.w	r4, r7, #32
 8001006:	461d      	mov	r5, r3
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenerTaskHandle = osThreadCreate(osThread(listenerTask), NULL);
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f004 f847 	bl	80050ae <osThreadCreate>
 8001020:	4603      	mov	r3, r0
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <main+0xb0>)
 8001024:	6013      	str	r3, [r2, #0]

  /* definition and creation of controllerTask */
  osThreadDef(controllerTask, ControllerTask, osPriorityIdle, 0, 128);
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <main+0xb4>)
 8001028:	1d3c      	adds	r4, r7, #4
 800102a:	461d      	mov	r5, r3
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f004 f836 	bl	80050ae <osThreadCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <main+0xb8>)
 8001046:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001048:	f004 f82a 	bl	80050a0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	AP_Main_execute();
 800104c:	f7ff fabb 	bl	80005c6 <AP_Main_execute>
 8001050:	e7fc      	b.n	800104c <main+0x9c>
 8001052:	bf00      	nop
 8001054:	08007588 	.word	0x08007588
 8001058:	20000574 	.word	0x20000574
 800105c:	080075b4 	.word	0x080075b4
 8001060:	20000578 	.word	0x20000578
 8001064:	080075e0 	.word	0x080075e0
 8001068:	2000057c 	.word	0x2000057c

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	@ 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fc64 	bl	8006948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <SystemClock_Config+0xc8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	4a26      	ldr	r2, [pc, #152]	@ (8001134 <SystemClock_Config+0xc8>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <SystemClock_Config+0xc8>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <SystemClock_Config+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a20      	ldr	r2, [pc, #128]	@ (8001138 <SystemClock_Config+0xcc>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <SystemClock_Config+0xcc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010e0:	2364      	movs	r3, #100	@ 0x64
 80010e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fa81 	bl	80025f8 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010fc:	f000 fac4 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2103      	movs	r1, #3
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fce3 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001128:	f000 faae 	bl	8001688 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3750      	adds	r7, #80	@ 0x50
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 f8f9 	bl	8002370 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fa80 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200003b8 	.word	0x200003b8
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <MX_TIM1_Init+0x9c>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011bc:	2263      	movs	r2, #99	@ 0x63
 80011be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011e2:	f001 fed3 	bl	8002f8c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 fa4c 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011fe:	f002 fa97 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001208:	f000 fa3e 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_TIM1_Init+0x98>)
 800121a:	f002 fe51 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001224:	f000 fa30 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000040c 	.word	0x2000040c
 8001234:	40010000 	.word	0x40010000

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <MX_TIM2_Init+0x94>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_TIM2_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_TIM2_Init+0x94>)
 800126a:	f04f 32ff 	mov.w	r2, #4294967295
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_TIM2_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_TIM2_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127c:	4813      	ldr	r0, [pc, #76]	@ (80012cc <MX_TIM2_Init+0x94>)
 800127e:	f001 fe85 	bl	8002f8c <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001288:	f000 f9fe 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <MX_TIM2_Init+0x94>)
 800129a:	f002 fa49 	bl	8003730 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 f9f0 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_TIM2_Init+0x94>)
 80012b6:	f002 fe03 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 f9e2 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000454 	.word	0x20000454

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]
 80012fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001302:	4a33      	ldr	r2, [pc, #204]	@ (80013d0 <MX_TIM3_Init+0x100>)
 8001304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001308:	2201      	movs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <MX_TIM3_Init+0xfc>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001312:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001314:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001318:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <MX_TIM3_Init+0xfc>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001326:	4829      	ldr	r0, [pc, #164]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001328:	f001 fe30 	bl	8002f8c <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001332:	f000 f9a9 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001340:	4619      	mov	r1, r3
 8001342:	4822      	ldr	r0, [pc, #136]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001344:	f002 f9f4 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800134e:	f000 f99b 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001352:	481e      	ldr	r0, [pc, #120]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001354:	f001 fecc 	bl	80030f0 <HAL_TIM_PWM_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800135e:	f000 f993 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4619      	mov	r1, r3
 8001370:	4816      	ldr	r0, [pc, #88]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001372:	f002 fda5 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800137c:	f000 f984 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	2360      	movs	r3, #96	@ 0x60
 8001382:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_TIM3_Init+0xfc>)
 8001398:	f002 f908 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013a2:	f000 f971 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2204      	movs	r2, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MX_TIM3_Init+0xfc>)
 80013ae:	f002 f8fd 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013b8:	f000 f966 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <MX_TIM3_Init+0xfc>)
 80013be:	f000 fa2f 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	@ 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000049c 	.word	0x2000049c
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f002 fdda 	bl	8003fc4 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f937 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200004e4 	.word	0x200004e4
 8001424:	40011000 	.word	0x40011000

08001428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_USART2_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001460:	f002 fdb0 	bl	8003fc4 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 f90d 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000052c 	.word	0x2000052c
 8001478:	40004400 	.word	0x40004400

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <MX_GPIO_Init+0x108>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a3a      	ldr	r2, [pc, #232]	@ (8001584 <MX_GPIO_Init+0x108>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a33      	ldr	r2, [pc, #204]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_GPIO_Init+0x108>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|Motor2_IN1_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <MX_GPIO_Init+0x10c>)
 800150a:	f000 fefd 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor2_IN2_Pin|Motor1_IN2_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001514:	481d      	ldr	r0, [pc, #116]	@ (800158c <MX_GPIO_Init+0x110>)
 8001516:	f000 fef7 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	481c      	ldr	r0, [pc, #112]	@ (8001590 <MX_GPIO_Init+0x114>)
 8001520:	f000 fef2 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 Motor2_IN1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|Motor2_IN1_Pin;
 8001524:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4812      	ldr	r0, [pc, #72]	@ (8001588 <MX_GPIO_Init+0x10c>)
 800153e:	f000 fd5f 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_IN2_Pin Motor1_IN2_Pin */
  GPIO_InitStruct.Pin = Motor2_IN2_Pin|Motor1_IN2_Pin;
 8001542:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_GPIO_Init+0x110>)
 800155c:	f000 fd50 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor1_IN1_Pin */
  GPIO_InitStruct.Pin = Motor1_IN1_Pin;
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor1_IN1_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_GPIO_Init+0x114>)
 8001578:	f000 fd42 	bl	8002000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800

08001594 <HAL_UART_RxCpltCallback>:
uint8_t rcvData;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <HAL_UART_RxCpltCallback+0x48>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d116      	bne.n	80015d4 <HAL_UART_RxCpltCallback+0x40>
	{
		Listener_ISR_Process(rcvData);
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_UART_RxCpltCallback+0x4c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f92c 	bl	8000808 <Listener_ISR_Process>
		HAL_UART_Transmit(Model_getHandler()->myHuart, &rcvData, 1, 100);
 80015b0:	f7ff fb38 	bl	8000c24 <Model_getHandler>
 80015b4:	4603      	mov	r3, r0
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	2201      	movs	r2, #1
 80015bc:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <HAL_UART_RxCpltCallback+0x4c>)
 80015be:	f002 fd51 	bl	8004064 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(Model_getHandler()->myHuart, &rcvData, 1);
 80015c2:	f7ff fb2f 	bl	8000c24 <Model_getHandler>
 80015c6:	4603      	mov	r3, r0
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4904      	ldr	r1, [pc, #16]	@ (80015e0 <HAL_UART_RxCpltCallback+0x4c>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fdd3 	bl	800417a <HAL_UART_Receive_IT>
	}
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40004400 	.word	0x40004400
 80015e0:	20000580 	.word	0x20000580

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  AP_Main_init(&huart2, &htim3, &htim1, &htim2, &htim3);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <StartDefaultTask+0x3c>)
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <StartDefaultTask+0x40>)
 80015f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <StartDefaultTask+0x44>)
 80015f4:	490a      	ldr	r1, [pc, #40]	@ (8001620 <StartDefaultTask+0x3c>)
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <StartDefaultTask+0x48>)
 80015f8:	f7fe ffca 	bl	8000590 <AP_Main_init>
	HAL_UART_Receive_IT(Model_getHandler()->myHuart, &rcvData, 1);
 80015fc:	f7ff fb12 	bl	8000c24 <Model_getHandler>
 8001600:	4603      	mov	r3, r0
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	490a      	ldr	r1, [pc, #40]	@ (8001630 <StartDefaultTask+0x4c>)
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fdb6 	bl	800417a <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800160e:	2120      	movs	r1, #32
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <StartDefaultTask+0x50>)
 8001612:	f000 fe92 	bl	800233a <HAL_GPIO_TogglePin>
    osDelay(100);
 8001616:	2064      	movs	r0, #100	@ 0x64
 8001618:	f003 fd95 	bl	8005146 <osDelay>
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800161c:	bf00      	nop
 800161e:	e7f6      	b.n	800160e <StartDefaultTask+0x2a>
 8001620:	2000049c 	.word	0x2000049c
 8001624:	20000454 	.word	0x20000454
 8001628:	2000040c 	.word	0x2000040c
 800162c:	2000052c 	.word	0x2000052c
 8001630:	20000580 	.word	0x20000580
 8001634:	40020000 	.word	0x40020000

08001638 <ListenerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
  /* Infinite loop */
  for(;;)
  {
  	Listener_CarMode_EventCheck();
 8001640:	f7ff f90c 	bl	800085c <Listener_CarMode_EventCheck>
    osDelay(1);
 8001644:	2001      	movs	r0, #1
 8001646:	f003 fd7e 	bl	8005146 <osDelay>
  	Listener_CarMode_EventCheck();
 800164a:	bf00      	nop
 800164c:	e7f8      	b.n	8001640 <ListenerTask+0x8>

0800164e <ControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
  /* Infinite loop */
  for(;;)
  {
  	Controller_Car_execute();
 8001656:	f7fe ffd7 	bl	8000608 <Controller_Car_execute>
    osDelay(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f003 fd73 	bl	8005146 <osDelay>
  	Controller_Car_execute();
 8001660:	bf00      	nop
 8001662:	e7f8      	b.n	8001656 <ControllerTask+0x8>

08001664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001676:	f000 fb2f 	bl	8001cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40014800 	.word	0x40014800

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_MspInit+0x54>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_MspInit+0x54>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_MspInit+0x54>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_MspInit+0x54>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_MspInit+0x54>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_MspInit+0x54>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	210f      	movs	r1, #15
 80016d6:	f06f 0001 	mvn.w	r0, #1
 80016da:	f000 fbd5 	bl	8001e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_I2C_MspInit+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12c      	bne.n	8001768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480c      	ldr	r0, [pc, #48]	@ (8001778 <HAL_I2C_MspInit+0x8c>)
 8001748:	f000 fc5a 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 8001756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800175a:	6413      	str	r3, [r2, #64]	@ 0x40
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <HAL_I2C_MspInit+0x88>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40005400 	.word	0x40005400
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d116      	bne.n	80017bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	210f      	movs	r1, #15
 80017ae:	201a      	movs	r0, #26
 80017b0:	f000 fb6a 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017b4:	201a      	movs	r0, #26
 80017b6:	f000 fb83 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ba:	e026      	b.n	800180a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c4:	d10e      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
}
 80017e2:	e012      	b.n	800180a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_TIM_Base_MspInit+0xa0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	40023800 	.word	0x40023800
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <HAL_TIM_MspPostInit+0x68>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d11d      	bne.n	800187e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_TIM_MspPostInit+0x6c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <HAL_TIM_MspPostInit+0x6c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_TIM_MspPostInit+0x6c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800185e:	23c0      	movs	r3, #192	@ 0xc0
 8001860:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <HAL_TIM_MspPostInit+0x70>)
 800187a:	f000 fbc1 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40000400 	.word	0x40000400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	@ 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3a      	ldr	r2, [pc, #232]	@ (800199c <HAL_UART_MspInit+0x108>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d135      	bne.n	8001922 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a38      	ldr	r2, [pc, #224]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001900:	2307      	movs	r3, #7
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	4826      	ldr	r0, [pc, #152]	@ (80019a4 <HAL_UART_MspInit+0x110>)
 800190c:	f000 fb78 	bl	8002000 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2105      	movs	r1, #5
 8001914:	2025      	movs	r0, #37	@ 0x25
 8001916:	f000 fab7 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800191a:	2025      	movs	r0, #37	@ 0x25
 800191c:	f000 fad0 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001920:	e038      	b.n	8001994 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <HAL_UART_MspInit+0x114>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d133      	bne.n	8001994 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 8001936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	@ 0x30
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_UART_MspInit+0x10c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001964:	230c      	movs	r3, #12
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001974:	2307      	movs	r3, #7
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <HAL_UART_MspInit+0x110>)
 8001980:	f000 fb3e 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2105      	movs	r1, #5
 8001988:	2026      	movs	r0, #38	@ 0x26
 800198a:	f000 fa7d 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800198e:	2026      	movs	r0, #38	@ 0x26
 8001990:	f000 fa96 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	@ 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40011000 	.word	0x40011000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40004400 	.word	0x40004400

080019ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a7c <HAL_InitTick+0xd0>)
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <HAL_InitTick+0xd0>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80019cc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_InitTick+0xd0>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d8:	f107 020c 	add.w	r2, r7, #12
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 faa0 	bl	8002f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019e8:	f001 fa8a 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80019ec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f0:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <HAL_InitTick+0xd4>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	3b01      	subs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_InitTick+0xd8>)
 80019fe:	4a22      	ldr	r2, [pc, #136]	@ (8001a88 <HAL_InitTick+0xdc>)
 8001a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a08:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a22:	4818      	ldr	r0, [pc, #96]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a24:	f001 fab2 	bl	8002f8c <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11b      	bne.n	8001a6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a36:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <HAL_InitTick+0xd8>)
 8001a38:	f001 faf8 	bl	800302c <HAL_TIM_Base_Start_IT>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d111      	bne.n	8001a6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a4a:	201a      	movs	r0, #26
 8001a4c:	f000 fa38 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d808      	bhi.n	8001a68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	201a      	movs	r0, #26
 8001a5c:	f000 fa14 	bl	8001e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a60:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <HAL_InitTick+0xe0>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e002      	b.n	8001a6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3730      	adds	r7, #48	@ 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	20000584 	.word	0x20000584
 8001a88:	40014800 	.word	0x40014800
 8001a8c:	20000004 	.word	0x20000004

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001ace:	f001 fc7d 	bl	80033cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001ad4:	f001 fc7a 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000040c 	.word	0x2000040c
 8001ae0:	20000584 	.word	0x20000584

08001ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <USART1_IRQHandler+0x10>)
 8001aea:	f002 fb6b 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004e4 	.word	0x200004e4

08001af8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <USART2_IRQHandler+0x10>)
 8001afe:	f002 fb61 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000052c 	.word	0x2000052c

08001b0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
  }

  return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f004 ff00 	bl	80069e4 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20020000 	.word	0x20020000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	200005cc 	.word	0x200005cc
 8001c18:	20004478 	.word	0x20004478

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c44:	f7ff ffea 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c48:	480c      	ldr	r0, [pc, #48]	@ (8001c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4a:	490d      	ldr	r1, [pc, #52]	@ (8001c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c60:	4c0a      	ldr	r4, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f004 febf 	bl	80069f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff f99d 	bl	8000fb0 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c84:	08007660 	.word	0x08007660
  ldr r2, =_sbss
 8001c88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c8c:	20004474 	.word	0x20004474

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <HAL_Init+0x40>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_Init+0x40>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_Init+0x40>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f8d8 	bl	8001e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f7ff fe72 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fce4 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200005d0 	.word	0x200005d0

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200005d0 	.word	0x200005d0

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	@ (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff4c 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9a:	f7ff ff61 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f7ff ffb1 	bl	8001e0c <NVIC_EncodePriority>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff80 	bl	8001db8 <__NVIC_SetPriority>
}
 8001eb8:	bf00      	nop
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff54 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff ff09 	bl	8001d00 <HAL_GetTick>
 8001eee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e052      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_Abort+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5e:	e013      	b.n	8001f88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f60:	f7ff fece 	bl	8001d00 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d90c      	bls.n	8001f88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e015      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e4      	bne.n	8001f60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	223f      	movs	r2, #63	@ 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d004      	beq.n	8001fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00c      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e159      	b.n	80022d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8148 	bne.w	80022ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a2 	beq.w	80022ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b57      	ldr	r3, [pc, #348]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a56      	ldr	r2, [pc, #344]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b54      	ldr	r3, [pc, #336]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_GPIO_Init+0x2ec>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a49      	ldr	r2, [pc, #292]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x202>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <HAL_GPIO_Init+0x2f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x1fe>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a47      	ldr	r2, [pc, #284]	@ (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x1fa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a46      	ldr	r2, [pc, #280]	@ (80022fc <HAL_GPIO_Init+0x2fc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a45      	ldr	r2, [pc, #276]	@ (8002300 <HAL_GPIO_Init+0x300>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x1f2>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x204>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	@ (80022ec <HAL_GPIO_Init+0x2ec>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b38      	ldr	r3, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_GPIO_Init+0x304>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a24      	ldr	r2, [pc, #144]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002276:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229a:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f aea2 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43d9      	mvns	r1, r3
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e12b      	b.n	80025da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f9a8 	bl	80016ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d4:	f000 fd80 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a81      	ldr	r2, [pc, #516]	@ (80025e4 <HAL_I2C_Init+0x274>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d807      	bhi.n	80023f4 <HAL_I2C_Init+0x84>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a80      	ldr	r2, [pc, #512]	@ (80025e8 <HAL_I2C_Init+0x278>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e006      	b.n	8002402 <HAL_I2C_Init+0x92>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a7d      	ldr	r2, [pc, #500]	@ (80025ec <HAL_I2C_Init+0x27c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0e7      	b.n	80025da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a78      	ldr	r2, [pc, #480]	@ (80025f0 <HAL_I2C_Init+0x280>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a6a      	ldr	r2, [pc, #424]	@ (80025e4 <HAL_I2C_Init+0x274>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d802      	bhi.n	8002444 <HAL_I2C_Init+0xd4>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	e009      	b.n	8002458 <HAL_I2C_Init+0xe8>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a69      	ldr	r2, [pc, #420]	@ (80025f4 <HAL_I2C_Init+0x284>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800246a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	495c      	ldr	r1, [pc, #368]	@ (80025e4 <HAL_I2C_Init+0x274>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d819      	bhi.n	80024ac <HAL_I2C_Init+0x13c>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e59      	subs	r1, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fbb1 f3f3 	udiv	r3, r1, r3
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800248c:	400b      	ands	r3, r1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_I2C_Init+0x138>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e59      	subs	r1, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a6:	e051      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e04f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_I2C_Init+0x168>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e012      	b.n	80024fe <HAL_I2C_Init+0x18e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x196>
 8002502:	2301      	movs	r3, #1
 8002504:	e022      	b.n	800254c <HAL_I2C_Init+0x1dc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <HAL_I2C_Init+0x1bc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e58      	subs	r0, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	440b      	add	r3, r1
 800251c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800252a:	e00f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6809      	ldr	r1, [r1, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800257a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6911      	ldr	r1, [r2, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	000186a0 	.word	0x000186a0
 80025e8:	001e847f 	.word	0x001e847f
 80025ec:	003d08ff 	.word	0x003d08ff
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	10624dd3 	.word	0x10624dd3

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb26 	bl	8001d00 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fb22 	bl	8001d00 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb12 	bl	8001d00 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fb0e 	bl	8001d00 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff fac7 	bl	8001d00 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fac3 	bl	8001d00 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff faa6 	bl	8001d00 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff faa2 	bl	8001d00 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff fa86 	bl	8001d00 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fa82 	bl	8001d00 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fa6f 	bl	8001d00 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff fa6b 	bl	8001d00 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	@ 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fa2b 	bl	8001d00 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7ff fa27 	bl	8001d00 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7ff f9ec 	bl	8001d00 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7ff f9e8 	bl	8001d00 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7ff f9d6 	bl	8001d00 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7ff f9d2 	bl	8001d00 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff f9a6 	bl	8001d00 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff f9a2 	bl	8001d00 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff f97b 	bl	8001d00 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff f977 	bl	8001d00 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff f964 	bl	8001d00 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff f960 	bl	8001d00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7ff f892 	bl	8001d00 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7ff f88e 	bl	8001d00 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fe8c 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08007604 	.word	0x08007604
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	@ 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc4:	f7fd fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fa12 	bl	80002a0 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	@ 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08007614 	.word	0x08007614

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08007614 	.word	0x08007614

08002f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	220f      	movs	r2, #15
 8002f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f44:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f5c:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <HAL_RCC_GetClockConfig+0x60>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e041      	b.n	8003022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fbe2 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fca0 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e044      	b.n	80030ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306e:	d013      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	@ (80030e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d010      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	e007      	b.n	80030cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40014000 	.word	0x40014000

080030f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f839 	bl	800318e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fbee 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_TIM_PWM_Start+0x24>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e022      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d109      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x3e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e015      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x58>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e008      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e068      	b.n	80032e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x82>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003224:	e013      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0x92>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003234:	e00b      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d104      	bne.n	8003246 <HAL_TIM_PWM_Start+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	e003      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fe0c 	bl	8003e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a23      	ldr	r2, [pc, #140]	@ (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d107      	bne.n	8003276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d013      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a19      	ldr	r2, [pc, #100]	@ (80032f4 <HAL_TIM_PWM_Start+0x150>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_TIM_PWM_Start+0x154>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_TIM_PWM_Start+0x158>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a14      	ldr	r2, [pc, #80]	@ (8003300 <HAL_TIM_PWM_Start+0x15c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d010      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	e007      	b.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40014000 	.word	0x40014000

08003304 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fdac 	bl	8003e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_TIM_PWM_Stop+0xc4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d117      	bne.n	8003356 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1a      	ldr	r2, [r3, #32]
 800332c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_TIM_PWM_Stop+0x52>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_TIM_PWM_Stop+0x52>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_TIM_PWM_Stop+0x82>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_TIM_PWM_Stop+0x82>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Stop+0x92>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003394:	e013      	b.n	80033be <HAL_TIM_PWM_Stop+0xba>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Stop+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a4:	e00b      	b.n	80033be <HAL_TIM_PWM_Stop+0xba>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Stop+0xb2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	e003      	b.n	80033be <HAL_TIM_PWM_Stop+0xba>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40010000 	.word	0x40010000

080033cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0202 	mvn.w	r2, #2
 8003400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa5b 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa4d 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa5e 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0204 	mvn.w	r2, #4
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa35 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa27 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa38 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa0f 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa01 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fa12 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d020      	beq.n	8003514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0210 	mvn.w	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2208      	movs	r2, #8
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9e9 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9db 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f9ec 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0201 	mvn.w	r2, #1
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe f896 	bl	8001664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fd2a 	bl	8003fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9bd 	bl	80038fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0220 	mvn.w	r2, #32
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fcfc 	bl	8003f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0ae      	b.n	8003728 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	f200 809f 	bhi.w	8003718 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035da:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003615 	.word	0x08003615
 80035e4:	08003719 	.word	0x08003719
 80035e8:	08003719 	.word	0x08003719
 80035ec:	08003719 	.word	0x08003719
 80035f0:	08003655 	.word	0x08003655
 80035f4:	08003719 	.word	0x08003719
 80035f8:	08003719 	.word	0x08003719
 80035fc:	08003719 	.word	0x08003719
 8003600:	08003697 	.word	0x08003697
 8003604:	08003719 	.word	0x08003719
 8003608:	08003719 	.word	0x08003719
 800360c:	08003719 	.word	0x08003719
 8003610:	080036d7 	.word	0x080036d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa04 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6999      	ldr	r1, [r3, #24]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	619a      	str	r2, [r3, #24]
      break;
 8003652:	e064      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fa4a 	bl	8003af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
      break;
 8003694:	e043      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fa95 	bl	8003bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0208 	orr.w	r2, r2, #8
 80036b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0204 	bic.w	r2, r2, #4
 80036c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
      break;
 80036d4:	e023      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fadf 	bl	8003ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69d9      	ldr	r1, [r3, #28]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	61da      	str	r2, [r3, #28]
      break;
 8003716:	e002      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
      break;
 800371c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e0b4      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x186>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003784:	d03e      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0xd4>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378a:	f200 8087 	bhi.w	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003792:	f000 8086 	beq.w	80038a2 <HAL_TIM_ConfigClockSource+0x172>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379a:	d87f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b70      	cmp	r3, #112	@ 0x70
 800379e:	d01a      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xa6>
 80037a0:	2b70      	cmp	r3, #112	@ 0x70
 80037a2:	d87b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b60      	cmp	r3, #96	@ 0x60
 80037a6:	d050      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x11a>
 80037a8:	2b60      	cmp	r3, #96	@ 0x60
 80037aa:	d877      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b50      	cmp	r3, #80	@ 0x50
 80037ae:	d03c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xfa>
 80037b0:	2b50      	cmp	r3, #80	@ 0x50
 80037b2:	d873      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b40      	cmp	r3, #64	@ 0x40
 80037b6:	d058      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x13a>
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d86f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b30      	cmp	r3, #48	@ 0x30
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c0:	2b30      	cmp	r3, #48	@ 0x30
 80037c2:	d86b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d060      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d867      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d05a      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	e062      	b.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e6:	f000 fb25 	bl	8003e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	609a      	str	r2, [r3, #8]
      break;
 8003802:	e04f      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	f000 fb0e 	bl	8003e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e03c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	461a      	mov	r2, r3
 8003838:	f000 fa82 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2150      	movs	r1, #80	@ 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fadb 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003848:	e02c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003856:	461a      	mov	r2, r3
 8003858:	f000 faa1 	bl	8003d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2160      	movs	r1, #96	@ 0x60
 8003862:	4618      	mov	r0, r3
 8003864:	f000 facb 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003868:	e01c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fa62 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	@ 0x40
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fabb 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 fab2 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 800389a:	e003      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	@ (8003a0c <TIM_Base_SetConfig+0xfc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00f      	beq.n	8003948 <TIM_Base_SetConfig+0x38>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d00b      	beq.n	8003948 <TIM_Base_SetConfig+0x38>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a37      	ldr	r2, [pc, #220]	@ (8003a10 <TIM_Base_SetConfig+0x100>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d007      	beq.n	8003948 <TIM_Base_SetConfig+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a36      	ldr	r2, [pc, #216]	@ (8003a14 <TIM_Base_SetConfig+0x104>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0x38>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a35      	ldr	r2, [pc, #212]	@ (8003a18 <TIM_Base_SetConfig+0x108>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <TIM_Base_SetConfig+0xfc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	@ (8003a10 <TIM_Base_SetConfig+0x100>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	@ (8003a14 <TIM_Base_SetConfig+0x104>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <TIM_Base_SetConfig+0x108>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	@ (8003a1c <TIM_Base_SetConfig+0x10c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	@ (8003a20 <TIM_Base_SetConfig+0x110>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	@ (8003a24 <TIM_Base_SetConfig+0x114>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <TIM_Base_SetConfig+0xfc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d105      	bne.n	80039fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
  }
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0201 	bic.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 0302 	bic.w	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <TIM_OC1_SetConfig+0xc8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10c      	bne.n	8003a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0308 	bic.w	r3, r3, #8
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <TIM_OC1_SetConfig+0xc8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000

08003af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0210 	bic.w	r2, r3, #16
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <TIM_OC2_SetConfig+0xd4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10d      	bne.n	8003b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <TIM_OC2_SetConfig+0xd4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d113      	bne.n	8003ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000

08003bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <TIM_OC3_SetConfig+0xd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10d      	bne.n	8003c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <TIM_OC3_SetConfig+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d113      	bne.n	8003c76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40010000 	.word	0x40010000

08003ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	031b      	lsls	r3, r3, #12
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a10      	ldr	r2, [pc, #64]	@ (8003d3c <TIM_OC4_SetConfig+0x9c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d109      	bne.n	8003d14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000

08003d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 030a 	bic.w	r3, r3, #10
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f023 0210 	bic.w	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f043 0307 	orr.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2201      	movs	r2, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1a      	ldr	r2, [r3, #32]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e050      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f24:	d013      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a16      	ldr	r2, [pc, #88]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40014000 	.word	0x40014000

08003f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fc52 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	@ 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fdbd 	bl	8004b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800401c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d175      	bne.n	8004170 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Transmit+0x2c>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e06e      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	@ 0x21
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fd fe2d 	bl	8001d00 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040bc:	d108      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e003      	b.n	80040d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d8:	e02e      	b.n	8004138 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb1f 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e03a      	b.n	8004172 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3302      	adds	r3, #2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e007      	b.n	800412a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cb      	bne.n	80040da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	@ 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 faeb 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	d112      	bne.n	80041ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_Receive_IT+0x26>
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e00b      	b.n	80041bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	461a      	mov	r2, r3
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb12 	bl	80047da <UART_Start_Receive_IT>
 80041b6:	4603      	mov	r3, r0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0ba      	sub	sp, #232	@ 0xe8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_UART_IRQHandler+0x66>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fbf2 	bl	8004a0c <UART_Receive_IT>
      return;
 8004228:	e25b      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800422a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80de 	beq.w	80043f0 <HAL_UART_IRQHandler+0x22c>
 8004234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004244:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80d1 	beq.w	80043f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xae>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f043 0201 	orr.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_UART_IRQHandler+0xd2>
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_UART_IRQHandler+0xf6>
 80042a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_UART_IRQHandler+0x126>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f043 0208 	orr.w	r2, r3, #8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 81f2 	beq.w	80046d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_UART_IRQHandler+0x14e>
 8004300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb7d 	bl	8004a0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_UART_IRQHandler+0x17a>
 8004336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04f      	beq.n	80043de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa85 	bl	800484e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d141      	bne.n	80043d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800436c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800437e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800438a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d9      	bne.n	8004352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d013      	beq.n	80043ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	4a7e      	ldr	r2, [pc, #504]	@ (80045a4 <HAL_UART_IRQHandler+0x3e0>)
 80043ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fe02 	bl	8001fbc <HAL_DMA_Abort_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00e      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f994 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00a      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f990 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e006      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f98c 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043ea:	e175      	b.n	80046d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	bf00      	nop
    return;
 80043ee:	e173      	b.n	80046d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 814f 	bne.w	8004698 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8148 	beq.w	8004698 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8141 	beq.w	8004698 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b40      	cmp	r3, #64	@ 0x40
 8004438:	f040 80b6 	bne.w	80045a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8145 	beq.w	80046dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445a:	429a      	cmp	r2, r3
 800445c:	f080 813e 	bcs.w	80046dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004466:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	f000 8088 	beq.w	8004586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800448c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1d9      	bne.n	8004476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e1      	bne.n	80044c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800450e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004568:	65ba      	str	r2, [r7, #88]	@ 0x58
 800456a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800456e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e3      	bne.n	8004544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004580:	4618      	mov	r0, r3
 8004582:	f7fd fcab 	bl	8001edc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004594:	b29b      	uxth	r3, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8b7 	bl	8004710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a2:	e09b      	b.n	80046dc <HAL_UART_IRQHandler+0x518>
 80045a4:	08004915 	.word	0x08004915
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 808e 	beq.w	80046e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8089 	beq.w	80046e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80045f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	623b      	str	r3, [r7, #32]
   return(result);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800462a:	633a      	str	r2, [r7, #48]	@ 0x30
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e3      	bne.n	8004606 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60fb      	str	r3, [r7, #12]
   return(result);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004670:	61fa      	str	r2, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	617b      	str	r3, [r7, #20]
   return(result);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e3      	bne.n	800464c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800468a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f83d 	bl	8004710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004696:	e023      	b.n	80046e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x4f4>
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f943 	bl	800493c <UART_Transmit_IT>
    return;
 80046b6:	e014      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00e      	beq.n	80046e2 <HAL_UART_IRQHandler+0x51e>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f983 	bl	80049dc <UART_EndTransmit_IT>
    return;
 80046d6:	e004      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046e0:	bf00      	nop
  }
}
 80046e2:	37e8      	adds	r7, #232	@ 0xe8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	e03b      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d037      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fd fadd 	bl	8001d00 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <UART_WaitOnFlagUntilTimeout+0x30>
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e03a      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d023      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b80      	cmp	r3, #128	@ 0x80
 800476e:	d020      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d01d      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d116      	bne.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f857 	bl	800484e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2208      	movs	r2, #8
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d0b4      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2222      	movs	r2, #34	@ 0x22
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800481e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0220 	orr.w	r2, r2, #32
 800483e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800484e:	b480      	push	{r7}
 8004850:	b095      	sub	sp, #84	@ 0x54
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800486c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004876:	643a      	str	r2, [r7, #64]	@ 0x40
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800487c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	61fb      	str	r3, [r7, #28]
   return(result);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d119      	bne.n	80048fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f023 0310 	bic.w	r3, r3, #16
 80048dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e6:	61ba      	str	r2, [r7, #24]
 80048e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6979      	ldr	r1, [r7, #20]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	613b      	str	r3, [r7, #16]
   return(result);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004908:	bf00      	nop
 800490a:	3754      	adds	r7, #84	@ 0x54
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fee4 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b21      	cmp	r3, #33	@ 0x21
 800494e:	d13e      	bne.n	80049ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d114      	bne.n	8004984 <UART_Transmit_IT+0x48>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d110      	bne.n	8004984 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004976:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]
 8004982:	e008      	b.n	8004996 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	1c59      	adds	r1, r3, #1
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6211      	str	r1, [r2, #32]
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4619      	mov	r1, r3
 80049a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
  }
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fe73 	bl	80046e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	@ 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b22      	cmp	r3, #34	@ 0x22
 8004a1e:	f040 80ae 	bne.w	8004b7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2a:	d117      	bne.n	8004a5c <UART_Receive_IT+0x50>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a5a:	e026      	b.n	8004aaa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	d007      	beq.n	8004a80 <UART_Receive_IT+0x74>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <UART_Receive_IT+0x82>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e008      	b.n	8004aa0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d15d      	bne.n	8004b7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0220 	bic.w	r2, r2, #32
 8004acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004adc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d135      	bne.n	8004b70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2a:	623a      	str	r2, [r7, #32]
 8004b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	69f9      	ldr	r1, [r7, #28]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d10a      	bne.n	8004b62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fdd1 	bl	8004710 <HAL_UARTEx_RxEventCallback>
 8004b6e:	e002      	b.n	8004b76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc fd0f 	bl	8001594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e002      	b.n	8004b80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3730      	adds	r7, #48	@ 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0c0      	sub	sp, #256	@ 0x100
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	68d9      	ldr	r1, [r3, #12]
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	ea40 0301 	orr.w	r3, r0, r1
 8004bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004be0:	f021 010c 	bic.w	r1, r1, #12
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	6999      	ldr	r1, [r3, #24]
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	ea40 0301 	orr.w	r3, r0, r1
 8004c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b8f      	ldr	r3, [pc, #572]	@ (8004e54 <UART_SetConfig+0x2cc>)
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d005      	beq.n	8004c28 <UART_SetConfig+0xa0>
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b8d      	ldr	r3, [pc, #564]	@ (8004e58 <UART_SetConfig+0x2d0>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d104      	bne.n	8004c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe f96a 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c30:	e003      	b.n	8004c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c32:	f7fe f951 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8004c36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c44:	f040 810c 	bne.w	8004e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c62:	415b      	adcs	r3, r3
 8004c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	eb12 0801 	adds.w	r8, r2, r1
 8004c70:	4629      	mov	r1, r5
 8004c72:	eb43 0901 	adc.w	r9, r3, r1
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	4699      	mov	r9, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	eb18 0303 	adds.w	r3, r8, r3
 8004c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c98:	462b      	mov	r3, r5
 8004c9a:	eb49 0303 	adc.w	r3, r9, r3
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	18db      	adds	r3, r3, r3
 8004cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	eb42 0303 	adc.w	r3, r2, r3
 8004cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ccc:	f7fb fae8 	bl	80002a0 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4b61      	ldr	r3, [pc, #388]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	011c      	lsls	r4, r3, #4
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d00:	4641      	mov	r1, r8
 8004d02:	eb12 0a01 	adds.w	sl, r2, r1
 8004d06:	4649      	mov	r1, r9
 8004d08:	eb43 0b01 	adc.w	fp, r3, r1
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d20:	4692      	mov	sl, r2
 8004d22:	469b      	mov	fp, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	eb1a 0303 	adds.w	r3, sl, r3
 8004d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	eb4b 0303 	adc.w	r3, fp, r3
 8004d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	18db      	adds	r3, r3, r3
 8004d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d52:	4613      	mov	r3, r2
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d62:	f7fb fa9d 	bl	80002a0 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2264      	movs	r2, #100	@ 0x64
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	1acb      	subs	r3, r1, r3
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d82:	4b36      	ldr	r3, [pc, #216]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004d84:	fba3 2302 	umull	r2, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d90:	441c      	add	r4, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dac:	415b      	adcs	r3, r3
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004db4:	4641      	mov	r1, r8
 8004db6:	1851      	adds	r1, r2, r1
 8004db8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dba:	4649      	mov	r1, r9
 8004dbc:	414b      	adcs	r3, r1
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dcc:	4659      	mov	r1, fp
 8004dce:	00cb      	lsls	r3, r1, #3
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	00ca      	lsls	r2, r1, #3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	4642      	mov	r2, r8
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004de8:	464b      	mov	r3, r9
 8004dea:	460a      	mov	r2, r1
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e08:	460b      	mov	r3, r1
 8004e0a:	18db      	adds	r3, r3, r3
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e0e:	4613      	mov	r3, r2
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e1e:	f7fb fa3f 	bl	80002a0 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004e28:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2164      	movs	r1, #100	@ 0x64
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3332      	adds	r3, #50	@ 0x32
 8004e3a:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	f003 0207 	and.w	r2, r3, #7
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4422      	add	r2, r4
 8004e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e50:	e106      	b.n	8005060 <UART_SetConfig+0x4d8>
 8004e52:	bf00      	nop
 8004e54:	40011000 	.word	0x40011000
 8004e58:	40011400 	.word	0x40011400
 8004e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e72:	4642      	mov	r2, r8
 8004e74:	464b      	mov	r3, r9
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	6239      	str	r1, [r7, #32]
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e82:	4641      	mov	r1, r8
 8004e84:	1854      	adds	r4, r2, r1
 8004e86:	4649      	mov	r1, r9
 8004e88:	eb43 0501 	adc.w	r5, r3, r1
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	00eb      	lsls	r3, r5, #3
 8004e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9a:	00e2      	lsls	r2, r4, #3
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	18e3      	adds	r3, r4, r3
 8004ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	eb45 0303 	adc.w	r3, r5, r3
 8004eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ece:	4629      	mov	r1, r5
 8004ed0:	008b      	lsls	r3, r1, #2
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed8:	4621      	mov	r1, r4
 8004eda:	008a      	lsls	r2, r1, #2
 8004edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ee0:	f7fb f9de 	bl	80002a0 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b60      	ldr	r3, [pc, #384]	@ (800506c <UART_SetConfig+0x4e4>)
 8004eea:	fba3 2302 	umull	r2, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	011c      	lsls	r4, r3, #4
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004efc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	61b9      	str	r1, [r7, #24]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6139      	str	r1, [r7, #16]
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	008b      	lsls	r3, r1, #2
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f76:	4641      	mov	r1, r8
 8004f78:	008a      	lsls	r2, r1, #2
 8004f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f7e:	f7fb f98f 	bl	80002a0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	4b38      	ldr	r3, [pc, #224]	@ (800506c <UART_SetConfig+0x4e4>)
 8004f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2264      	movs	r2, #100	@ 0x64
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	1acb      	subs	r3, r1, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	@ 0x32
 8004f9c:	4a33      	ldr	r2, [pc, #204]	@ (800506c <UART_SetConfig+0x4e4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fa8:	441c      	add	r4, r3
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc8:	4641      	mov	r1, r8
 8004fca:	1851      	adds	r1, r2, r1
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	4649      	mov	r1, r9
 8004fd0:	414b      	adcs	r3, r1
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	00cb      	lsls	r3, r1, #3
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fea:	4651      	mov	r1, sl
 8004fec:	00ca      	lsls	r2, r1, #3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	663b      	str	r3, [r7, #96]	@ 0x60
 800500e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800501c:	4649      	mov	r1, r9
 800501e:	008b      	lsls	r3, r1, #2
 8005020:	4641      	mov	r1, r8
 8005022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005026:	4641      	mov	r1, r8
 8005028:	008a      	lsls	r2, r1, #2
 800502a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800502e:	f7fb f937 	bl	80002a0 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <UART_SetConfig+0x4e4>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	@ 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	3332      	adds	r3, #50	@ 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	@ (800506c <UART_SetConfig+0x4e4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 020f 	and.w	r2, r3, #15
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4422      	add	r2, r4
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005066:	46bd      	mov	sp, r7
 8005068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506c:	51eb851f 	.word	0x51eb851f

08005070 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800507e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005082:	2b84      	cmp	r3, #132	@ 0x84
 8005084:	d005      	beq.n	8005092 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005086:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	3303      	adds	r3, #3
 8005090:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050a4:	f000 fae4 	bl	8005670 <vTaskStartScheduler>
  
  return osOK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	bd80      	pop	{r7, pc}

080050ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b0:	b089      	sub	sp, #36	@ 0x24
 80050b2:	af04      	add	r7, sp, #16
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <osThreadCreate+0x54>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01c      	beq.n	8005102 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685c      	ldr	r4, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691e      	ldr	r6, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff ffc8 	bl	8005070 <makeFreeRtosPriority>
 80050e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ea:	9202      	str	r2, [sp, #8]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	9100      	str	r1, [sp, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	4632      	mov	r2, r6
 80050f4:	4629      	mov	r1, r5
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f8ed 	bl	80052d6 <xTaskCreateStatic>
 80050fc:	4603      	mov	r3, r0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e01c      	b.n	800513c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685c      	ldr	r4, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800510e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ffaa 	bl	8005070 <makeFreeRtosPriority>
 800511c:	4602      	mov	r2, r0
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	9200      	str	r2, [sp, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	4632      	mov	r2, r6
 800512a:	4629      	mov	r1, r5
 800512c:	4620      	mov	r0, r4
 800512e:	f000 f932 	bl	8005396 <xTaskCreate>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005146 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <osDelay+0x16>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	e000      	b.n	800515e <osDelay+0x18>
 800515c:	2301      	movs	r3, #1
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fa50 	bl	8005604 <vTaskDelay>
  
  return osOK;
 8005164:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 0208 	add.w	r2, r3, #8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f103 0208 	add.w	r2, r3, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f103 0208 	add.w	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d103      	bne.n	8005230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e00c      	b.n	800524a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3308      	adds	r3, #8
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e002      	b.n	800523e <vListInsert+0x2e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	d2f6      	bcs.n	8005238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6852      	ldr	r2, [r2, #4]
 80052a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d103      	bne.n	80052b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b08e      	sub	sp, #56	@ 0x38
 80052da:	af04      	add	r7, sp, #16
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61fb      	str	r3, [r7, #28]
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005320:	2354      	movs	r3, #84	@ 0x54
 8005322:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b54      	cmp	r3, #84	@ 0x54
 8005328:	d00b      	beq.n	8005342 <xTaskCreateStatic+0x6c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61bb      	str	r3, [r7, #24]
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	e7fd      	b.n	800533e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01e      	beq.n	8005388 <xTaskCreateStatic+0xb2>
 800534a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005362:	2300      	movs	r3, #0
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f850 	bl	8005420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005380:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005382:	f000 f8d5 	bl	8005530 <prvAddNewTaskToReadyList>
 8005386:	e001      	b.n	800538c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800538c:	697b      	ldr	r3, [r7, #20]
	}
 800538e:	4618      	mov	r0, r3
 8005390:	3728      	adds	r7, #40	@ 0x28
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08c      	sub	sp, #48	@ 0x30
 800539a:	af04      	add	r7, sp, #16
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fed4 	bl	8006158 <pvPortMalloc>
 80053b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00e      	beq.n	80053d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053b8:	2054      	movs	r0, #84	@ 0x54
 80053ba:	f000 fecd 	bl	8006158 <pvPortMalloc>
 80053be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80053cc:	e005      	b.n	80053da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053ce:	6978      	ldr	r0, [r7, #20]
 80053d0:	f000 ff90 	bl	80062f4 <vPortFree>
 80053d4:	e001      	b.n	80053da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	9302      	str	r3, [sp, #8]
 80053f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f80e 	bl	8005420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005404:	69f8      	ldr	r0, [r7, #28]
 8005406:	f000 f893 	bl	8005530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800540a:	2301      	movs	r3, #1
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e002      	b.n	8005416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005416:	69bb      	ldr	r3, [r7, #24]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005438:	3b01      	subs	r3, #1
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	617b      	str	r3, [r7, #20]
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	e7fd      	b.n	8005466 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01f      	beq.n	80054b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e012      	b.n	800549c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	7819      	ldrb	r1, [r3, #0]
 800547e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	3334      	adds	r3, #52	@ 0x34
 8005486:	460a      	mov	r2, r1
 8005488:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3301      	adds	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	d9e9      	bls.n	8005476 <prvInitialiseNewTask+0x56>
 80054a2:	e000      	b.n	80054a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80054a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ae:	e003      	b.n	80054b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d901      	bls.n	80054c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054be:	2306      	movs	r3, #6
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	2200      	movs	r2, #0
 80054d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe68 	bl	80051ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	3318      	adds	r3, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fe63 	bl	80051ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	f1c3 0207 	rsb	r2, r3, #7
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	69b8      	ldr	r0, [r7, #24]
 8005512:	f000 fc0d 	bl	8005d30 <pxPortInitialiseStack>
 8005516:	4602      	mov	r2, r0
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005526:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005528:	bf00      	nop
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005538:	f000 fd2e 	bl	8005f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800553c:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a29      	ldr	r2, [pc, #164]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 8005544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800554e:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005554:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d110      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800555c:	f000 fac4 	bl	8005ae8 <prvInitialiseTaskLists>
 8005560:	e00d      	b.n	800557e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005562:	4b23      	ldr	r3, [pc, #140]	@ (80055f0 <prvAddNewTaskToReadyList+0xc0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800556a:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	429a      	cmp	r2, r3
 8005576:	d802      	bhi.n	800557e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005578:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <prvAddNewTaskToReadyList+0xc4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <prvAddNewTaskToReadyList+0xc4>)
 8005586:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <prvAddNewTaskToReadyList+0xc8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <prvAddNewTaskToReadyList+0xc8>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <prvAddNewTaskToReadyList+0xcc>)
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7ff fe09 	bl	80051c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055b6:	f000 fd21 	bl	8005ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <prvAddNewTaskToReadyList+0xc0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d207      	bcs.n	80055e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <prvAddNewTaskToReadyList+0xd0>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	200006d4 	.word	0x200006d4
 80055ec:	200005d4 	.word	0x200005d4
 80055f0:	200006e0 	.word	0x200006e0
 80055f4:	200006f0 	.word	0x200006f0
 80055f8:	200006dc 	.word	0x200006dc
 80055fc:	200005d8 	.word	0x200005d8
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <vTaskDelay+0x64>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vTaskDelay+0x32>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60bb      	str	r3, [r7, #8]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005636:	f000 f87d 	bl	8005734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb11 	bl	8005c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005642:	f000 f885 	bl	8005750 <xTaskResumeAll>
 8005646:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800564e:	4b07      	ldr	r3, [pc, #28]	@ (800566c <vTaskDelay+0x68>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200006fc 	.word	0x200006fc
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800567e:	463a      	mov	r2, r7
 8005680:	1d39      	adds	r1, r7, #4
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f7fb fc78 	bl	8000f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	460a      	mov	r2, r1
 800569e:	491f      	ldr	r1, [pc, #124]	@ (800571c <vTaskStartScheduler+0xac>)
 80056a0:	481f      	ldr	r0, [pc, #124]	@ (8005720 <vTaskStartScheduler+0xb0>)
 80056a2:	f7ff fe18 	bl	80052d6 <xTaskCreateStatic>
 80056a6:	4603      	mov	r3, r0
 80056a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <vTaskStartScheduler+0xb4>)
 80056aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <vTaskStartScheduler+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e001      	b.n	80056be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d116      	bne.n	80056f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	613b      	str	r3, [r7, #16]
}
 80056d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056d8:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <vTaskStartScheduler+0xb8>)
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <vTaskStartScheduler+0xbc>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056e6:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <vTaskStartScheduler+0xc0>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ec:	f000 fbb0 	bl	8005e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056f0:	e00f      	b.n	8005712 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d10b      	bne.n	8005712 <vTaskStartScheduler+0xa2>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60fb      	str	r3, [r7, #12]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vTaskStartScheduler+0x9e>
}
 8005712:	bf00      	nop
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	080075fc 	.word	0x080075fc
 8005720:	08005ab9 	.word	0x08005ab9
 8005724:	200006f8 	.word	0x200006f8
 8005728:	200006f4 	.word	0x200006f4
 800572c:	200006e0 	.word	0x200006e0
 8005730:	200006d8 	.word	0x200006d8

08005734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005738:	4b04      	ldr	r3, [pc, #16]	@ (800574c <vTaskSuspendAll+0x18>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	4a03      	ldr	r2, [pc, #12]	@ (800574c <vTaskSuspendAll+0x18>)
 8005740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005742:	bf00      	nop
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	200006fc 	.word	0x200006fc

08005750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800575e:	4b42      	ldr	r3, [pc, #264]	@ (8005868 <xTaskResumeAll+0x118>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <xTaskResumeAll+0x2e>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800577e:	f000 fc0b 	bl	8005f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005782:	4b39      	ldr	r3, [pc, #228]	@ (8005868 <xTaskResumeAll+0x118>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3b01      	subs	r3, #1
 8005788:	4a37      	ldr	r2, [pc, #220]	@ (8005868 <xTaskResumeAll+0x118>)
 800578a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578c:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <xTaskResumeAll+0x118>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d161      	bne.n	8005858 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005794:	4b35      	ldr	r3, [pc, #212]	@ (800586c <xTaskResumeAll+0x11c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05d      	beq.n	8005858 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800579c:	e02e      	b.n	80057fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579e:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <xTaskResumeAll+0x120>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3318      	adds	r3, #24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fd69 	bl	8005282 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fd64 	bl	8005282 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	2201      	movs	r2, #1
 80057c0:	409a      	lsls	r2, r3
 80057c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <xTaskResumeAll+0x124>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005874 <xTaskResumeAll+0x124>)
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4a27      	ldr	r2, [pc, #156]	@ (8005878 <xTaskResumeAll+0x128>)
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7ff fcf0 	bl	80051c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ec:	4b23      	ldr	r3, [pc, #140]	@ (800587c <xTaskResumeAll+0x12c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057f6:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <xTaskResumeAll+0x130>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005870 <xTaskResumeAll+0x120>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1cc      	bne.n	800579e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800580a:	f000 fa0b 	bl	8005c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800580e:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <xTaskResumeAll+0x134>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800581a:	f000 f837 	bl	800588c <xTaskIncrementTick>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005824:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <xTaskResumeAll+0x130>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3b01      	subs	r3, #1
 800582e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f1      	bne.n	800581a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005836:	4b13      	ldr	r3, [pc, #76]	@ (8005884 <xTaskResumeAll+0x134>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800583c:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <xTaskResumeAll+0x130>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005848:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <xTaskResumeAll+0x138>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005858:	f000 fbd0 	bl	8005ffc <vPortExitCritical>

	return xAlreadyYielded;
 800585c:	68bb      	ldr	r3, [r7, #8]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	200006fc 	.word	0x200006fc
 800586c:	200006d4 	.word	0x200006d4
 8005870:	20000694 	.word	0x20000694
 8005874:	200006dc 	.word	0x200006dc
 8005878:	200005d8 	.word	0x200005d8
 800587c:	200005d4 	.word	0x200005d4
 8005880:	200006e8 	.word	0x200006e8
 8005884:	200006e4 	.word	0x200006e4
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005896:	4b4f      	ldr	r3, [pc, #316]	@ (80059d4 <xTaskIncrementTick+0x148>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 808f 	bne.w	80059be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a0:	4b4d      	ldr	r3, [pc, #308]	@ (80059d8 <xTaskIncrementTick+0x14c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a8:	4a4b      	ldr	r2, [pc, #300]	@ (80059d8 <xTaskIncrementTick+0x14c>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d121      	bne.n	80058f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b4:	4b49      	ldr	r3, [pc, #292]	@ (80059dc <xTaskIncrementTick+0x150>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	603b      	str	r3, [r7, #0]
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	e7fd      	b.n	80058d2 <xTaskIncrementTick+0x46>
 80058d6:	4b41      	ldr	r3, [pc, #260]	@ (80059dc <xTaskIncrementTick+0x150>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	4b40      	ldr	r3, [pc, #256]	@ (80059e0 <xTaskIncrementTick+0x154>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3e      	ldr	r2, [pc, #248]	@ (80059dc <xTaskIncrementTick+0x150>)
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4a3e      	ldr	r2, [pc, #248]	@ (80059e0 <xTaskIncrementTick+0x154>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <xTaskIncrementTick+0x158>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3301      	adds	r3, #1
 80058f0:	4a3c      	ldr	r2, [pc, #240]	@ (80059e4 <xTaskIncrementTick+0x158>)
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	f000 f996 	bl	8005c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f8:	4b3b      	ldr	r3, [pc, #236]	@ (80059e8 <xTaskIncrementTick+0x15c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d348      	bcc.n	8005994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005902:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <xTaskIncrementTick+0x150>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590c:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <xTaskIncrementTick+0x15c>)
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	601a      	str	r2, [r3, #0]
					break;
 8005914:	e03e      	b.n	8005994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b31      	ldr	r3, [pc, #196]	@ (80059dc <xTaskIncrementTick+0x150>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d203      	bcs.n	8005936 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800592e:	4a2e      	ldr	r2, [pc, #184]	@ (80059e8 <xTaskIncrementTick+0x15c>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005934:	e02e      	b.n	8005994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	3304      	adds	r3, #4
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fca1 	bl	8005282 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3318      	adds	r3, #24
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fc98 	bl	8005282 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	2201      	movs	r2, #1
 8005958:	409a      	lsls	r2, r3
 800595a:	4b24      	ldr	r3, [pc, #144]	@ (80059ec <xTaskIncrementTick+0x160>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <xTaskIncrementTick+0x160>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4a1f      	ldr	r2, [pc, #124]	@ (80059f0 <xTaskIncrementTick+0x164>)
 8005972:	441a      	add	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3304      	adds	r3, #4
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7ff fc24 	bl	80051c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <xTaskIncrementTick+0x168>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	429a      	cmp	r2, r3
 800598c:	d3b9      	bcc.n	8005902 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005992:	e7b6      	b.n	8005902 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b17      	ldr	r3, [pc, #92]	@ (80059f4 <xTaskIncrementTick+0x168>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	4915      	ldr	r1, [pc, #84]	@ (80059f0 <xTaskIncrementTick+0x164>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d901      	bls.n	80059b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b0:	4b11      	ldr	r3, [pc, #68]	@ (80059f8 <xTaskIncrementTick+0x16c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e004      	b.n	80059c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059be:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <xTaskIncrementTick+0x170>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a0d      	ldr	r2, [pc, #52]	@ (80059fc <xTaskIncrementTick+0x170>)
 80059c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c8:	697b      	ldr	r3, [r7, #20]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200006fc 	.word	0x200006fc
 80059d8:	200006d8 	.word	0x200006d8
 80059dc:	2000068c 	.word	0x2000068c
 80059e0:	20000690 	.word	0x20000690
 80059e4:	200006ec 	.word	0x200006ec
 80059e8:	200006f4 	.word	0x200006f4
 80059ec:	200006dc 	.word	0x200006dc
 80059f0:	200005d8 	.word	0x200005d8
 80059f4:	200005d4 	.word	0x200005d4
 80059f8:	200006e8 	.word	0x200006e8
 80059fc:	200006e4 	.word	0x200006e4

08005a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a06:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <vTaskSwitchContext+0xa4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0e:	4b26      	ldr	r3, [pc, #152]	@ (8005aa8 <vTaskSwitchContext+0xa8>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a14:	e040      	b.n	8005a98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005a16:	4b24      	ldr	r3, [pc, #144]	@ (8005aa8 <vTaskSwitchContext+0xa8>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b23      	ldr	r3, [pc, #140]	@ (8005aac <vTaskSwitchContext+0xac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	fab3 f383 	clz	r3, r3
 8005a28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	f1c3 031f 	rsb	r3, r3, #31
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	491f      	ldr	r1, [pc, #124]	@ (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	607b      	str	r3, [r7, #4]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <vTaskSwitchContext+0x5a>
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a6a:	4413      	add	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d104      	bne.n	8005a8e <vTaskSwitchContext+0x8e>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a07      	ldr	r2, [pc, #28]	@ (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a96:	6013      	str	r3, [r2, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200006fc 	.word	0x200006fc
 8005aa8:	200006e8 	.word	0x200006e8
 8005aac:	200006dc 	.word	0x200006dc
 8005ab0:	200005d8 	.word	0x200005d8
 8005ab4:	200005d4 	.word	0x200005d4

08005ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ac0:	f000 f852 	bl	8005b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <prvIdleTask+0x28>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d9f9      	bls.n	8005ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005acc:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <prvIdleTask+0x2c>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005adc:	e7f0      	b.n	8005ac0 <prvIdleTask+0x8>
 8005ade:	bf00      	nop
 8005ae0:	200005d8 	.word	0x200005d8
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	e00c      	b.n	8005b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <prvInitialiseTaskLists+0x60>)
 8005b00:	4413      	add	r3, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fb33 	bl	800516e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d9ef      	bls.n	8005af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b14:	480d      	ldr	r0, [pc, #52]	@ (8005b4c <prvInitialiseTaskLists+0x64>)
 8005b16:	f7ff fb2a 	bl	800516e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b1a:	480d      	ldr	r0, [pc, #52]	@ (8005b50 <prvInitialiseTaskLists+0x68>)
 8005b1c:	f7ff fb27 	bl	800516e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b20:	480c      	ldr	r0, [pc, #48]	@ (8005b54 <prvInitialiseTaskLists+0x6c>)
 8005b22:	f7ff fb24 	bl	800516e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b26:	480c      	ldr	r0, [pc, #48]	@ (8005b58 <prvInitialiseTaskLists+0x70>)
 8005b28:	f7ff fb21 	bl	800516e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b2c:	480b      	ldr	r0, [pc, #44]	@ (8005b5c <prvInitialiseTaskLists+0x74>)
 8005b2e:	f7ff fb1e 	bl	800516e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b32:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <prvInitialiseTaskLists+0x78>)
 8005b34:	4a05      	ldr	r2, [pc, #20]	@ (8005b4c <prvInitialiseTaskLists+0x64>)
 8005b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <prvInitialiseTaskLists+0x7c>)
 8005b3a:	4a05      	ldr	r2, [pc, #20]	@ (8005b50 <prvInitialiseTaskLists+0x68>)
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200005d8 	.word	0x200005d8
 8005b4c:	20000664 	.word	0x20000664
 8005b50:	20000678 	.word	0x20000678
 8005b54:	20000694 	.word	0x20000694
 8005b58:	200006a8 	.word	0x200006a8
 8005b5c:	200006c0 	.word	0x200006c0
 8005b60:	2000068c 	.word	0x2000068c
 8005b64:	20000690 	.word	0x20000690

08005b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b6e:	e019      	b.n	8005ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b70:	f000 fa12 	bl	8005f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b74:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x50>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fb7e 	bl	8005282 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <prvCheckTasksWaitingTermination+0x54>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005bbc <prvCheckTasksWaitingTermination+0x54>)
 8005b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b9a:	f000 fa2f 	bl	8005ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f810 	bl	8005bc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e1      	bne.n	8005b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200006a8 	.word	0x200006a8
 8005bbc:	200006d4 	.word	0x200006d4
 8005bc0:	200006bc 	.word	0x200006bc

08005bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fb8a 	bl	80062f4 <vPortFree>
				vPortFree( pxTCB );
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fb87 	bl	80062f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005be6:	e019      	b.n	8005c1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d103      	bne.n	8005bfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb7e 	bl	80062f4 <vPortFree>
	}
 8005bf8:	e010      	b.n	8005c1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d00b      	beq.n	8005c1c <prvDeleteTCB+0x58>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	60fb      	str	r3, [r7, #12]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <prvDeleteTCB+0x54>
	}
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <prvResetNextTaskUnblockTime+0x38>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvResetNextTaskUnblockTime+0x3c>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c3c:	e008      	b.n	8005c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <prvResetNextTaskUnblockTime+0x38>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <prvResetNextTaskUnblockTime+0x3c>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	2000068c 	.word	0x2000068c
 8005c60:	200006f4 	.word	0x200006f4

08005c64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	@ (8005d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c74:	4b28      	ldr	r3, [pc, #160]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fb01 	bl	8005282 <uxListRemove>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c86:	4b24      	ldr	r3, [pc, #144]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	4a20      	ldr	r2, [pc, #128]	@ (8005d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d10a      	bne.n	8005cbc <prvAddCurrentTaskToDelayedList+0x58>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cac:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	481a      	ldr	r0, [pc, #104]	@ (8005d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cb6:	f7ff fa87 	bl	80051c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cba:	e026      	b.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc4:	4b14      	ldr	r3, [pc, #80]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d209      	bcs.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd4:	4b13      	ldr	r3, [pc, #76]	@ (8005d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7ff fa95 	bl	8005210 <vListInsert>
}
 8005ce6:	e010      	b.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7ff fa8b 	bl	8005210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d202      	bcs.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d04:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200006d8 	.word	0x200006d8
 8005d18:	200005d4 	.word	0x200005d4
 8005d1c:	200006dc 	.word	0x200006dc
 8005d20:	200006c0 	.word	0x200006c0
 8005d24:	20000690 	.word	0x20000690
 8005d28:	2000068c 	.word	0x2000068c
 8005d2c:	200006f4 	.word	0x200006f4

08005d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d60:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <pxPortInitialiseStack+0x64>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b14      	subs	r3, #20
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f06f 0202 	mvn.w	r2, #2
 8005d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b20      	subs	r3, #32
 8005d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	08005d99 	.word	0x08005d99

08005d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005da2:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <prvTaskExitError+0x58>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d00b      	beq.n	8005dc4 <prvTaskExitError+0x2c>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <prvTaskExitError+0x28>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60bb      	str	r3, [r7, #8]
}
 8005dd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dd8:	bf00      	nop
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0fc      	beq.n	8005dda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	2000000c 	.word	0x2000000c
	...

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	4770      	bx	lr
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst2>:
 8005e20:	200005d4 	.word	0x200005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e28:	4808      	ldr	r0, [pc, #32]	@ (8005e4c <prvPortStartFirstTask+0x24>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8814 	msr	CONTROL, r0
 8005e3a:	b662      	cpsie	i
 8005e3c:	b661      	cpsie	f
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	df00      	svc	0
 8005e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e4a:	bf00      	nop
 8005e4c:	e000ed08 	.word	0xe000ed08

08005e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e56:	4b47      	ldr	r3, [pc, #284]	@ (8005f74 <xPortStartScheduler+0x124>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a47      	ldr	r2, [pc, #284]	@ (8005f78 <xPortStartScheduler+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10b      	bne.n	8005e78 <xPortStartScheduler+0x28>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	613b      	str	r3, [r7, #16]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e78:	4b3e      	ldr	r3, [pc, #248]	@ (8005f74 <xPortStartScheduler+0x124>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f7c <xPortStartScheduler+0x12c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10b      	bne.n	8005e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e9a:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <xPortStartScheduler+0x130>)
 8005e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	22ff      	movs	r2, #255	@ 0xff
 8005eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <xPortStartScheduler+0x134>)
 8005ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ec2:	4b31      	ldr	r3, [pc, #196]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec8:	e009      	b.n	8005ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eca:	4b2f      	ldr	r3, [pc, #188]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee6:	2b80      	cmp	r3, #128	@ 0x80
 8005ee8:	d0ef      	beq.n	8005eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eea:	4b27      	ldr	r3, [pc, #156]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1c3 0307 	rsb	r3, r3, #7
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d00b      	beq.n	8005f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	60bb      	str	r3, [r7, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f18:	4b1b      	ldr	r3, [pc, #108]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f20:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <xPortStartScheduler+0x138>)
 8005f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f2c:	4b17      	ldr	r3, [pc, #92]	@ (8005f8c <xPortStartScheduler+0x13c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a16      	ldr	r2, [pc, #88]	@ (8005f8c <xPortStartScheduler+0x13c>)
 8005f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f38:	4b14      	ldr	r3, [pc, #80]	@ (8005f8c <xPortStartScheduler+0x13c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a13      	ldr	r2, [pc, #76]	@ (8005f8c <xPortStartScheduler+0x13c>)
 8005f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f44:	f000 f8da 	bl	80060fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f48:	4b11      	ldr	r3, [pc, #68]	@ (8005f90 <xPortStartScheduler+0x140>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f4e:	f000 f8f9 	bl	8006144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <xPortStartScheduler+0x144>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a0f      	ldr	r2, [pc, #60]	@ (8005f94 <xPortStartScheduler+0x144>)
 8005f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f5e:	f7ff ff63 	bl	8005e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f62:	f7ff fd4d 	bl	8005a00 <vTaskSwitchContext>
	prvTaskExitError();
 8005f66:	f7ff ff17 	bl	8005d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	e000ed00 	.word	0xe000ed00
 8005f78:	410fc271 	.word	0x410fc271
 8005f7c:	410fc270 	.word	0x410fc270
 8005f80:	e000e400 	.word	0xe000e400
 8005f84:	20000700 	.word	0x20000700
 8005f88:	20000704 	.word	0x20000704
 8005f8c:	e000ed20 	.word	0xe000ed20
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	e000ef34 	.word	0xe000ef34

08005f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	607b      	str	r3, [r7, #4]
}
 8005fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <vPortEnterCritical+0x5c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ff4 <vPortEnterCritical+0x5c>)
 8005fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <vPortEnterCritical+0x5c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d110      	bne.n	8005fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <vPortEnterCritical+0x60>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	603b      	str	r3, [r7, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <vPortEnterCritical+0x4a>
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	2000000c 	.word	0x2000000c
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006002:	4b12      	ldr	r3, [pc, #72]	@ (800604c <vPortExitCritical+0x50>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <vPortExitCritical+0x26>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	607b      	str	r3, [r7, #4]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006022:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	4a08      	ldr	r2, [pc, #32]	@ (800604c <vPortExitCritical+0x50>)
 800602a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <vPortExitCritical+0x50>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <vPortExitCritical+0x44>
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800603e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	2000000c 	.word	0x2000000c

08006050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006050:	f3ef 8009 	mrs	r0, PSP
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4b15      	ldr	r3, [pc, #84]	@ (80060b0 <pxCurrentTCBConst>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f01e 0f10 	tst.w	lr, #16
 8006060:	bf08      	it	eq
 8006062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	6010      	str	r0, [r2, #0]
 800606c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006074:	f380 8811 	msr	BASEPRI, r0
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f7ff fcbe 	bl	8005a00 <vTaskSwitchContext>
 8006084:	f04f 0000 	mov.w	r0, #0
 8006088:	f380 8811 	msr	BASEPRI, r0
 800608c:	bc09      	pop	{r0, r3}
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006096:	f01e 0f10 	tst.w	lr, #16
 800609a:	bf08      	it	eq
 800609c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060a0:	f380 8809 	msr	PSP, r0
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst>:
 80060b0:	200005d4 	.word	0x200005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f7ff fbdb 	bl	800588c <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <SysTick_Handler+0x40>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f383 8811 	msr	BASEPRI, r3
}
 80060ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006100:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006106:	4b0b      	ldr	r3, [pc, #44]	@ (8006134 <vPortSetupTimerInterrupt+0x38>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <vPortSetupTimerInterrupt+0x3c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <vPortSetupTimerInterrupt+0x40>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <vPortSetupTimerInterrupt+0x44>)
 800611a:	3b01      	subs	r3, #1
 800611c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611e:	4b04      	ldr	r3, [pc, #16]	@ (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e010 	.word	0xe000e010
 8006134:	e000e018 	.word	0xe000e018
 8006138:	20000000 	.word	0x20000000
 800613c:	10624dd3 	.word	0x10624dd3
 8006140:	e000e014 	.word	0xe000e014

08006144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006154 <vPortEnableVFP+0x10>
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800614e:	6001      	str	r1, [r0, #0]
 8006150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006152:	bf00      	nop
 8006154:	e000ed88 	.word	0xe000ed88

08006158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	@ 0x28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006164:	f7ff fae6 	bl	8005734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006168:	4b5c      	ldr	r3, [pc, #368]	@ (80062dc <pvPortMalloc+0x184>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006170:	f000 f924 	bl	80063bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006174:	4b5a      	ldr	r3, [pc, #360]	@ (80062e0 <pvPortMalloc+0x188>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 8095 	bne.w	80062ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01e      	beq.n	80061c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006188:	2208      	movs	r2, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d015      	beq.n	80061c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	3308      	adds	r3, #8
 80061a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <pvPortMalloc+0x6e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	617b      	str	r3, [r7, #20]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d06f      	beq.n	80062ac <pvPortMalloc+0x154>
 80061cc:	4b45      	ldr	r3, [pc, #276]	@ (80062e4 <pvPortMalloc+0x18c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d86a      	bhi.n	80062ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061d6:	4b44      	ldr	r3, [pc, #272]	@ (80062e8 <pvPortMalloc+0x190>)
 80061d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061da:	4b43      	ldr	r3, [pc, #268]	@ (80062e8 <pvPortMalloc+0x190>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061e0:	e004      	b.n	80061ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d903      	bls.n	80061fe <pvPortMalloc+0xa6>
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f1      	bne.n	80061e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061fe:	4b37      	ldr	r3, [pc, #220]	@ (80062dc <pvPortMalloc+0x184>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006204:	429a      	cmp	r2, r3
 8006206:	d051      	beq.n	80062ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2208      	movs	r2, #8
 800620e:	4413      	add	r3, r2
 8006210:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	1ad2      	subs	r2, r2, r3
 8006222:	2308      	movs	r3, #8
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	429a      	cmp	r2, r3
 8006228:	d920      	bls.n	800626c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <pvPortMalloc+0xfc>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	613b      	str	r3, [r7, #16]
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006266:	69b8      	ldr	r0, [r7, #24]
 8006268:	f000 f90a 	bl	8006480 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800626c:	4b1d      	ldr	r3, [pc, #116]	@ (80062e4 <pvPortMalloc+0x18c>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	4a1b      	ldr	r2, [pc, #108]	@ (80062e4 <pvPortMalloc+0x18c>)
 8006278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800627a:	4b1a      	ldr	r3, [pc, #104]	@ (80062e4 <pvPortMalloc+0x18c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <pvPortMalloc+0x194>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d203      	bcs.n	800628e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006286:	4b17      	ldr	r3, [pc, #92]	@ (80062e4 <pvPortMalloc+0x18c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <pvPortMalloc+0x194>)
 800628c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	4b13      	ldr	r3, [pc, #76]	@ (80062e0 <pvPortMalloc+0x188>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	431a      	orrs	r2, r3
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062a2:	4b13      	ldr	r3, [pc, #76]	@ (80062f0 <pvPortMalloc+0x198>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a11      	ldr	r2, [pc, #68]	@ (80062f0 <pvPortMalloc+0x198>)
 80062aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062ac:	f7ff fa50 	bl	8005750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <pvPortMalloc+0x17a>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	60fb      	str	r3, [r7, #12]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <pvPortMalloc+0x176>
	return pvReturn;
 80062d2:	69fb      	ldr	r3, [r7, #28]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	@ 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20004310 	.word	0x20004310
 80062e0:	20004324 	.word	0x20004324
 80062e4:	20004314 	.word	0x20004314
 80062e8:	20004308 	.word	0x20004308
 80062ec:	20004318 	.word	0x20004318
 80062f0:	2000431c 	.word	0x2000431c

080062f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04f      	beq.n	80063a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006306:	2308      	movs	r3, #8
 8006308:	425b      	negs	r3, r3
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4413      	add	r3, r2
 800630e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	4b25      	ldr	r3, [pc, #148]	@ (80063b0 <vPortFree+0xbc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <vPortFree+0x46>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	60fb      	str	r3, [r7, #12]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <vPortFree+0x66>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60bb      	str	r3, [r7, #8]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4b14      	ldr	r3, [pc, #80]	@ (80063b0 <vPortFree+0xbc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01e      	beq.n	80063a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11a      	bne.n	80063a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	4b0e      	ldr	r3, [pc, #56]	@ (80063b0 <vPortFree+0xbc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	43db      	mvns	r3, r3
 800637a:	401a      	ands	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006380:	f7ff f9d8 	bl	8005734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <vPortFree+0xc0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4413      	add	r3, r2
 800638e:	4a09      	ldr	r2, [pc, #36]	@ (80063b4 <vPortFree+0xc0>)
 8006390:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006392:	6938      	ldr	r0, [r7, #16]
 8006394:	f000 f874 	bl	8006480 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006398:	4b07      	ldr	r3, [pc, #28]	@ (80063b8 <vPortFree+0xc4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a06      	ldr	r2, [pc, #24]	@ (80063b8 <vPortFree+0xc4>)
 80063a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063a2:	f7ff f9d5 	bl	8005750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063a6:	bf00      	nop
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20004324 	.word	0x20004324
 80063b4:	20004314 	.word	0x20004314
 80063b8:	20004320 	.word	0x20004320

080063bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80063c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063c8:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <prvHeapInit+0xac>)
 80063ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3307      	adds	r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0307 	bic.w	r3, r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006468 <prvHeapInit+0xac>)
 80063ec:	4413      	add	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063f4:	4a1d      	ldr	r2, [pc, #116]	@ (800646c <prvHeapInit+0xb0>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063fa:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <prvHeapInit+0xb0>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006408:	2208      	movs	r2, #8
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <prvHeapInit+0xb4>)
 800641c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800641e:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <prvHeapInit+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006426:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800643c:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <prvHeapInit+0xb4>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a0a      	ldr	r2, [pc, #40]	@ (8006474 <prvHeapInit+0xb8>)
 800644a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a09      	ldr	r2, [pc, #36]	@ (8006478 <prvHeapInit+0xbc>)
 8006452:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006454:	4b09      	ldr	r3, [pc, #36]	@ (800647c <prvHeapInit+0xc0>)
 8006456:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800645a:	601a      	str	r2, [r3, #0]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	20000708 	.word	0x20000708
 800646c:	20004308 	.word	0x20004308
 8006470:	20004310 	.word	0x20004310
 8006474:	20004318 	.word	0x20004318
 8006478:	20004314 	.word	0x20004314
 800647c:	20004324 	.word	0x20004324

08006480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006488:	4b28      	ldr	r3, [pc, #160]	@ (800652c <prvInsertBlockIntoFreeList+0xac>)
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e002      	b.n	8006494 <prvInsertBlockIntoFreeList+0x14>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d8f7      	bhi.n	800648e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d108      	bne.n	80064c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	441a      	add	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d118      	bne.n	8006508 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <prvInsertBlockIntoFreeList+0xb0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d00d      	beq.n	80064fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	441a      	add	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	e008      	b.n	8006510 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <prvInsertBlockIntoFreeList+0xb0>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e003      	b.n	8006510 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d002      	beq.n	800651e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20004308 	.word	0x20004308
 8006530:	20004310 	.word	0x20004310

08006534 <std>:
 8006534:	2300      	movs	r3, #0
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	e9c0 3300 	strd	r3, r3, [r0]
 800653e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006542:	6083      	str	r3, [r0, #8]
 8006544:	8181      	strh	r1, [r0, #12]
 8006546:	6643      	str	r3, [r0, #100]	@ 0x64
 8006548:	81c2      	strh	r2, [r0, #14]
 800654a:	6183      	str	r3, [r0, #24]
 800654c:	4619      	mov	r1, r3
 800654e:	2208      	movs	r2, #8
 8006550:	305c      	adds	r0, #92	@ 0x5c
 8006552:	f000 f9f9 	bl	8006948 <memset>
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <std+0x58>)
 8006558:	6263      	str	r3, [r4, #36]	@ 0x24
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <std+0x5c>)
 800655c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <std+0x60>)
 8006560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <std+0x64>)
 8006564:	6323      	str	r3, [r4, #48]	@ 0x30
 8006566:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <std+0x68>)
 8006568:	6224      	str	r4, [r4, #32]
 800656a:	429c      	cmp	r4, r3
 800656c:	d006      	beq.n	800657c <std+0x48>
 800656e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006572:	4294      	cmp	r4, r2
 8006574:	d002      	beq.n	800657c <std+0x48>
 8006576:	33d0      	adds	r3, #208	@ 0xd0
 8006578:	429c      	cmp	r4, r3
 800657a:	d105      	bne.n	8006588 <std+0x54>
 800657c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006584:	f000 ba58 	b.w	8006a38 <__retarget_lock_init_recursive>
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08006799 	.word	0x08006799
 8006590:	080067bb 	.word	0x080067bb
 8006594:	080067f3 	.word	0x080067f3
 8006598:	08006817 	.word	0x08006817
 800659c:	20004328 	.word	0x20004328

080065a0 <stdio_exit_handler>:
 80065a0:	4a02      	ldr	r2, [pc, #8]	@ (80065ac <stdio_exit_handler+0xc>)
 80065a2:	4903      	ldr	r1, [pc, #12]	@ (80065b0 <stdio_exit_handler+0x10>)
 80065a4:	4803      	ldr	r0, [pc, #12]	@ (80065b4 <stdio_exit_handler+0x14>)
 80065a6:	f000 b869 	b.w	800667c <_fwalk_sglue>
 80065aa:	bf00      	nop
 80065ac:	20000010 	.word	0x20000010
 80065b0:	080072d9 	.word	0x080072d9
 80065b4:	20000020 	.word	0x20000020

080065b8 <cleanup_stdio>:
 80065b8:	6841      	ldr	r1, [r0, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	@ (80065ec <cleanup_stdio+0x34>)
 80065bc:	4299      	cmp	r1, r3
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	d001      	beq.n	80065c8 <cleanup_stdio+0x10>
 80065c4:	f000 fe88 	bl	80072d8 <_fflush_r>
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <cleanup_stdio+0x38>)
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d002      	beq.n	80065d6 <cleanup_stdio+0x1e>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fe81 	bl	80072d8 <_fflush_r>
 80065d6:	68e1      	ldr	r1, [r4, #12]
 80065d8:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <cleanup_stdio+0x3c>)
 80065da:	4299      	cmp	r1, r3
 80065dc:	d004      	beq.n	80065e8 <cleanup_stdio+0x30>
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f000 be78 	b.w	80072d8 <_fflush_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	20004328 	.word	0x20004328
 80065f0:	20004390 	.word	0x20004390
 80065f4:	200043f8 	.word	0x200043f8

080065f8 <global_stdio_init.part.0>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <global_stdio_init.part.0+0x30>)
 80065fc:	4c0b      	ldr	r4, [pc, #44]	@ (800662c <global_stdio_init.part.0+0x34>)
 80065fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006630 <global_stdio_init.part.0+0x38>)
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4620      	mov	r0, r4
 8006604:	2200      	movs	r2, #0
 8006606:	2104      	movs	r1, #4
 8006608:	f7ff ff94 	bl	8006534 <std>
 800660c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006610:	2201      	movs	r2, #1
 8006612:	2109      	movs	r1, #9
 8006614:	f7ff ff8e 	bl	8006534 <std>
 8006618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800661c:	2202      	movs	r2, #2
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff bf86 	b.w	8006534 <std>
 8006628:	20004460 	.word	0x20004460
 800662c:	20004328 	.word	0x20004328
 8006630:	080065a1 	.word	0x080065a1

08006634 <__sfp_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	@ (800663c <__sfp_lock_acquire+0x8>)
 8006636:	f000 ba00 	b.w	8006a3a <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	20004469 	.word	0x20004469

08006640 <__sfp_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	@ (8006648 <__sfp_lock_release+0x8>)
 8006642:	f000 b9fb 	b.w	8006a3c <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	20004469 	.word	0x20004469

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sfp_lock_acquire>
 8006654:	6a23      	ldr	r3, [r4, #32]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sfp_lock_release>
 8006660:	4b04      	ldr	r3, [pc, #16]	@ (8006674 <__sinit+0x28>)
 8006662:	6223      	str	r3, [r4, #32]
 8006664:	4b04      	ldr	r3, [pc, #16]	@ (8006678 <__sinit+0x2c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <__sinit+0xc>
 800666c:	f7ff ffc4 	bl	80065f8 <global_stdio_init.part.0>
 8006670:	e7f2      	b.n	8006658 <__sinit+0xc>
 8006672:	bf00      	nop
 8006674:	080065b9 	.word	0x080065b9
 8006678:	20004460 	.word	0x20004460

0800667c <_fwalk_sglue>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	4607      	mov	r7, r0
 8006682:	4688      	mov	r8, r1
 8006684:	4614      	mov	r4, r2
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800668c:	f1b9 0901 	subs.w	r9, r9, #1
 8006690:	d505      	bpl.n	800669e <_fwalk_sglue+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk_sglue+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d907      	bls.n	80066b4 <_fwalk_sglue+0x38>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d003      	beq.n	80066b4 <_fwalk_sglue+0x38>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	4306      	orrs	r6, r0
 80066b4:	3568      	adds	r5, #104	@ 0x68
 80066b6:	e7e9      	b.n	800668c <_fwalk_sglue+0x10>

080066b8 <iprintf>:
 80066b8:	b40f      	push	{r0, r1, r2, r3}
 80066ba:	b507      	push	{r0, r1, r2, lr}
 80066bc:	4906      	ldr	r1, [pc, #24]	@ (80066d8 <iprintf+0x20>)
 80066be:	ab04      	add	r3, sp, #16
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c6:	6881      	ldr	r1, [r0, #8]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	f000 fadb 	bl	8006c84 <_vfiprintf_r>
 80066ce:	b003      	add	sp, #12
 80066d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d4:	b004      	add	sp, #16
 80066d6:	4770      	bx	lr
 80066d8:	2000001c 	.word	0x2000001c

080066dc <_puts_r>:
 80066dc:	6a03      	ldr	r3, [r0, #32]
 80066de:	b570      	push	{r4, r5, r6, lr}
 80066e0:	6884      	ldr	r4, [r0, #8]
 80066e2:	4605      	mov	r5, r0
 80066e4:	460e      	mov	r6, r1
 80066e6:	b90b      	cbnz	r3, 80066ec <_puts_r+0x10>
 80066e8:	f7ff ffb0 	bl	800664c <__sinit>
 80066ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066ee:	07db      	lsls	r3, r3, #31
 80066f0:	d405      	bmi.n	80066fe <_puts_r+0x22>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	0598      	lsls	r0, r3, #22
 80066f6:	d402      	bmi.n	80066fe <_puts_r+0x22>
 80066f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066fa:	f000 f99e 	bl	8006a3a <__retarget_lock_acquire_recursive>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	0719      	lsls	r1, r3, #28
 8006702:	d502      	bpl.n	800670a <_puts_r+0x2e>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d135      	bne.n	8006776 <_puts_r+0x9a>
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	f000 f8c5 	bl	800689c <__swsetup_r>
 8006712:	b380      	cbz	r0, 8006776 <_puts_r+0x9a>
 8006714:	f04f 35ff 	mov.w	r5, #4294967295
 8006718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800671a:	07da      	lsls	r2, r3, #31
 800671c:	d405      	bmi.n	800672a <_puts_r+0x4e>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	059b      	lsls	r3, r3, #22
 8006722:	d402      	bmi.n	800672a <_puts_r+0x4e>
 8006724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006726:	f000 f989 	bl	8006a3c <__retarget_lock_release_recursive>
 800672a:	4628      	mov	r0, r5
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	2b00      	cmp	r3, #0
 8006730:	da04      	bge.n	800673c <_puts_r+0x60>
 8006732:	69a2      	ldr	r2, [r4, #24]
 8006734:	429a      	cmp	r2, r3
 8006736:	dc17      	bgt.n	8006768 <_puts_r+0x8c>
 8006738:	290a      	cmp	r1, #10
 800673a:	d015      	beq.n	8006768 <_puts_r+0x8c>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	6022      	str	r2, [r4, #0]
 8006742:	7019      	strb	r1, [r3, #0]
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800674a:	3b01      	subs	r3, #1
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	2900      	cmp	r1, #0
 8006750:	d1ed      	bne.n	800672e <_puts_r+0x52>
 8006752:	2b00      	cmp	r3, #0
 8006754:	da11      	bge.n	800677a <_puts_r+0x9e>
 8006756:	4622      	mov	r2, r4
 8006758:	210a      	movs	r1, #10
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f85f 	bl	800681e <__swbuf_r>
 8006760:	3001      	adds	r0, #1
 8006762:	d0d7      	beq.n	8006714 <_puts_r+0x38>
 8006764:	250a      	movs	r5, #10
 8006766:	e7d7      	b.n	8006718 <_puts_r+0x3c>
 8006768:	4622      	mov	r2, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f857 	bl	800681e <__swbuf_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d1e7      	bne.n	8006744 <_puts_r+0x68>
 8006774:	e7ce      	b.n	8006714 <_puts_r+0x38>
 8006776:	3e01      	subs	r6, #1
 8006778:	e7e4      	b.n	8006744 <_puts_r+0x68>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	220a      	movs	r2, #10
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e7ee      	b.n	8006764 <_puts_r+0x88>
	...

08006788 <puts>:
 8006788:	4b02      	ldr	r3, [pc, #8]	@ (8006794 <puts+0xc>)
 800678a:	4601      	mov	r1, r0
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	f7ff bfa5 	b.w	80066dc <_puts_r>
 8006792:	bf00      	nop
 8006794:	2000001c 	.word	0x2000001c

08006798 <__sread>:
 8006798:	b510      	push	{r4, lr}
 800679a:	460c      	mov	r4, r1
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	f000 f8fc 	bl	800699c <_read_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	bfab      	itete	ge
 80067a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067aa:	89a3      	ldrhlt	r3, [r4, #12]
 80067ac:	181b      	addge	r3, r3, r0
 80067ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067b2:	bfac      	ite	ge
 80067b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067b6:	81a3      	strhlt	r3, [r4, #12]
 80067b8:	bd10      	pop	{r4, pc}

080067ba <__swrite>:
 80067ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	461f      	mov	r7, r3
 80067c0:	898b      	ldrh	r3, [r1, #12]
 80067c2:	05db      	lsls	r3, r3, #23
 80067c4:	4605      	mov	r5, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	4616      	mov	r6, r2
 80067ca:	d505      	bpl.n	80067d8 <__swrite+0x1e>
 80067cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d0:	2302      	movs	r3, #2
 80067d2:	2200      	movs	r2, #0
 80067d4:	f000 f8d0 	bl	8006978 <_lseek_r>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	4628      	mov	r0, r5
 80067ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	f000 b8e7 	b.w	80069c0 <_write_r>

080067f2 <__sseek>:
 80067f2:	b510      	push	{r4, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fa:	f000 f8bd 	bl	8006978 <_lseek_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	bf15      	itete	ne
 8006804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800680a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800680e:	81a3      	strheq	r3, [r4, #12]
 8006810:	bf18      	it	ne
 8006812:	81a3      	strhne	r3, [r4, #12]
 8006814:	bd10      	pop	{r4, pc}

08006816 <__sclose>:
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	f000 b89d 	b.w	8006958 <_close_r>

0800681e <__swbuf_r>:
 800681e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006820:	460e      	mov	r6, r1
 8006822:	4614      	mov	r4, r2
 8006824:	4605      	mov	r5, r0
 8006826:	b118      	cbz	r0, 8006830 <__swbuf_r+0x12>
 8006828:	6a03      	ldr	r3, [r0, #32]
 800682a:	b90b      	cbnz	r3, 8006830 <__swbuf_r+0x12>
 800682c:	f7ff ff0e 	bl	800664c <__sinit>
 8006830:	69a3      	ldr	r3, [r4, #24]
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	071a      	lsls	r2, r3, #28
 8006838:	d501      	bpl.n	800683e <__swbuf_r+0x20>
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	b943      	cbnz	r3, 8006850 <__swbuf_r+0x32>
 800683e:	4621      	mov	r1, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f000 f82b 	bl	800689c <__swsetup_r>
 8006846:	b118      	cbz	r0, 8006850 <__swbuf_r+0x32>
 8006848:	f04f 37ff 	mov.w	r7, #4294967295
 800684c:	4638      	mov	r0, r7
 800684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	6922      	ldr	r2, [r4, #16]
 8006854:	1a98      	subs	r0, r3, r2
 8006856:	6963      	ldr	r3, [r4, #20]
 8006858:	b2f6      	uxtb	r6, r6
 800685a:	4283      	cmp	r3, r0
 800685c:	4637      	mov	r7, r6
 800685e:	dc05      	bgt.n	800686c <__swbuf_r+0x4e>
 8006860:	4621      	mov	r1, r4
 8006862:	4628      	mov	r0, r5
 8006864:	f000 fd38 	bl	80072d8 <_fflush_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	d1ed      	bne.n	8006848 <__swbuf_r+0x2a>
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	701e      	strb	r6, [r3, #0]
 800687a:	6962      	ldr	r2, [r4, #20]
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	429a      	cmp	r2, r3
 8006880:	d004      	beq.n	800688c <__swbuf_r+0x6e>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	07db      	lsls	r3, r3, #31
 8006886:	d5e1      	bpl.n	800684c <__swbuf_r+0x2e>
 8006888:	2e0a      	cmp	r6, #10
 800688a:	d1df      	bne.n	800684c <__swbuf_r+0x2e>
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 fd22 	bl	80072d8 <_fflush_r>
 8006894:	2800      	cmp	r0, #0
 8006896:	d0d9      	beq.n	800684c <__swbuf_r+0x2e>
 8006898:	e7d6      	b.n	8006848 <__swbuf_r+0x2a>
	...

0800689c <__swsetup_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4b29      	ldr	r3, [pc, #164]	@ (8006944 <__swsetup_r+0xa8>)
 80068a0:	4605      	mov	r5, r0
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	460c      	mov	r4, r1
 80068a6:	b118      	cbz	r0, 80068b0 <__swsetup_r+0x14>
 80068a8:	6a03      	ldr	r3, [r0, #32]
 80068aa:	b90b      	cbnz	r3, 80068b0 <__swsetup_r+0x14>
 80068ac:	f7ff fece 	bl	800664c <__sinit>
 80068b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b4:	0719      	lsls	r1, r3, #28
 80068b6:	d422      	bmi.n	80068fe <__swsetup_r+0x62>
 80068b8:	06da      	lsls	r2, r3, #27
 80068ba:	d407      	bmi.n	80068cc <__swsetup_r+0x30>
 80068bc:	2209      	movs	r2, #9
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ca:	e033      	b.n	8006934 <__swsetup_r+0x98>
 80068cc:	0758      	lsls	r0, r3, #29
 80068ce:	d512      	bpl.n	80068f6 <__swsetup_r+0x5a>
 80068d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d2:	b141      	cbz	r1, 80068e6 <__swsetup_r+0x4a>
 80068d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <__swsetup_r+0x46>
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f8af 	bl	8006a40 <_free_r>
 80068e2:	2300      	movs	r3, #0
 80068e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	2300      	movs	r3, #0
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f043 0308 	orr.w	r3, r3, #8
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	b94b      	cbnz	r3, 8006916 <__swsetup_r+0x7a>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800690c:	d003      	beq.n	8006916 <__swsetup_r+0x7a>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 fd2f 	bl	8007374 <__smakebuf_r>
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	f013 0201 	ands.w	r2, r3, #1
 800691e:	d00a      	beq.n	8006936 <__swsetup_r+0x9a>
 8006920:	2200      	movs	r2, #0
 8006922:	60a2      	str	r2, [r4, #8]
 8006924:	6962      	ldr	r2, [r4, #20]
 8006926:	4252      	negs	r2, r2
 8006928:	61a2      	str	r2, [r4, #24]
 800692a:	6922      	ldr	r2, [r4, #16]
 800692c:	b942      	cbnz	r2, 8006940 <__swsetup_r+0xa4>
 800692e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006932:	d1c5      	bne.n	80068c0 <__swsetup_r+0x24>
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	0799      	lsls	r1, r3, #30
 8006938:	bf58      	it	pl
 800693a:	6962      	ldrpl	r2, [r4, #20]
 800693c:	60a2      	str	r2, [r4, #8]
 800693e:	e7f4      	b.n	800692a <__swsetup_r+0x8e>
 8006940:	2000      	movs	r0, #0
 8006942:	e7f7      	b.n	8006934 <__swsetup_r+0x98>
 8006944:	2000001c 	.word	0x2000001c

08006948 <memset>:
 8006948:	4402      	add	r2, r0
 800694a:	4603      	mov	r3, r0
 800694c:	4293      	cmp	r3, r2
 800694e:	d100      	bne.n	8006952 <memset+0xa>
 8006950:	4770      	bx	lr
 8006952:	f803 1b01 	strb.w	r1, [r3], #1
 8006956:	e7f9      	b.n	800694c <memset+0x4>

08006958 <_close_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d06      	ldr	r5, [pc, #24]	@ (8006974 <_close_r+0x1c>)
 800695c:	2300      	movs	r3, #0
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fb f8ef 	bl	8001b46 <_close>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_close_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_close_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20004464 	.word	0x20004464

08006978 <_lseek_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	@ (8006998 <_lseek_r+0x20>)
 800697c:	4604      	mov	r4, r0
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	602a      	str	r2, [r5, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f7fb f904 	bl	8001b94 <_lseek>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_lseek_r+0x1e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_lseek_r+0x1e>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20004464 	.word	0x20004464

0800699c <_read_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_read_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fb f8ae 	bl	8001b0c <_read>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_read_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_read_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20004464 	.word	0x20004464

080069c0 <_write_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	@ (80069e0 <_write_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fa f93c 	bl	8000c4c <_write>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_write_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_write_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20004464 	.word	0x20004464

080069e4 <__errno>:
 80069e4:	4b01      	ldr	r3, [pc, #4]	@ (80069ec <__errno+0x8>)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2000001c 	.word	0x2000001c

080069f0 <__libc_init_array>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a28 <__libc_init_array+0x38>)
 80069f4:	4c0d      	ldr	r4, [pc, #52]	@ (8006a2c <__libc_init_array+0x3c>)
 80069f6:	1b64      	subs	r4, r4, r5
 80069f8:	10a4      	asrs	r4, r4, #2
 80069fa:	2600      	movs	r6, #0
 80069fc:	42a6      	cmp	r6, r4
 80069fe:	d109      	bne.n	8006a14 <__libc_init_array+0x24>
 8006a00:	4d0b      	ldr	r5, [pc, #44]	@ (8006a30 <__libc_init_array+0x40>)
 8006a02:	4c0c      	ldr	r4, [pc, #48]	@ (8006a34 <__libc_init_array+0x44>)
 8006a04:	f000 fd24 	bl	8007450 <_init>
 8006a08:	1b64      	subs	r4, r4, r5
 8006a0a:	10a4      	asrs	r4, r4, #2
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	42a6      	cmp	r6, r4
 8006a10:	d105      	bne.n	8006a1e <__libc_init_array+0x2e>
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a18:	4798      	blx	r3
 8006a1a:	3601      	adds	r6, #1
 8006a1c:	e7ee      	b.n	80069fc <__libc_init_array+0xc>
 8006a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a22:	4798      	blx	r3
 8006a24:	3601      	adds	r6, #1
 8006a26:	e7f2      	b.n	8006a0e <__libc_init_array+0x1e>
 8006a28:	08007658 	.word	0x08007658
 8006a2c:	08007658 	.word	0x08007658
 8006a30:	08007658 	.word	0x08007658
 8006a34:	0800765c 	.word	0x0800765c

08006a38 <__retarget_lock_init_recursive>:
 8006a38:	4770      	bx	lr

08006a3a <__retarget_lock_acquire_recursive>:
 8006a3a:	4770      	bx	lr

08006a3c <__retarget_lock_release_recursive>:
 8006a3c:	4770      	bx	lr
	...

08006a40 <_free_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4605      	mov	r5, r0
 8006a44:	2900      	cmp	r1, #0
 8006a46:	d041      	beq.n	8006acc <_free_r+0x8c>
 8006a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a4c:	1f0c      	subs	r4, r1, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfb8      	it	lt
 8006a52:	18e4      	addlt	r4, r4, r3
 8006a54:	f000 f8e0 	bl	8006c18 <__malloc_lock>
 8006a58:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad0 <_free_r+0x90>)
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	b933      	cbnz	r3, 8006a6c <_free_r+0x2c>
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6014      	str	r4, [r2, #0]
 8006a62:	4628      	mov	r0, r5
 8006a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a68:	f000 b8dc 	b.w	8006c24 <__malloc_unlock>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d908      	bls.n	8006a82 <_free_r+0x42>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf01      	itttt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	e7ed      	b.n	8006a5e <_free_r+0x1e>
 8006a82:	461a      	mov	r2, r3
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b10b      	cbz	r3, 8006a8c <_free_r+0x4c>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d9fa      	bls.n	8006a82 <_free_r+0x42>
 8006a8c:	6811      	ldr	r1, [r2, #0]
 8006a8e:	1850      	adds	r0, r2, r1
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d10b      	bne.n	8006aac <_free_r+0x6c>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	4401      	add	r1, r0
 8006a98:	1850      	adds	r0, r2, r1
 8006a9a:	4283      	cmp	r3, r0
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	d1e0      	bne.n	8006a62 <_free_r+0x22>
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	6053      	str	r3, [r2, #4]
 8006aa6:	4408      	add	r0, r1
 8006aa8:	6010      	str	r0, [r2, #0]
 8006aaa:	e7da      	b.n	8006a62 <_free_r+0x22>
 8006aac:	d902      	bls.n	8006ab4 <_free_r+0x74>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	e7d6      	b.n	8006a62 <_free_r+0x22>
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	1821      	adds	r1, r4, r0
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	bf04      	itt	eq
 8006abc:	6819      	ldreq	r1, [r3, #0]
 8006abe:	685b      	ldreq	r3, [r3, #4]
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	bf04      	itt	eq
 8006ac4:	1809      	addeq	r1, r1, r0
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	6054      	str	r4, [r2, #4]
 8006aca:	e7ca      	b.n	8006a62 <_free_r+0x22>
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	20004470 	.word	0x20004470

08006ad4 <sbrk_aligned>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b14 <sbrk_aligned+0x40>)
 8006ad8:	460c      	mov	r4, r1
 8006ada:	6831      	ldr	r1, [r6, #0]
 8006adc:	4605      	mov	r5, r0
 8006ade:	b911      	cbnz	r1, 8006ae6 <sbrk_aligned+0x12>
 8006ae0:	f000 fca6 	bl	8007430 <_sbrk_r>
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fca1 	bl	8007430 <_sbrk_r>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d103      	bne.n	8006afa <sbrk_aligned+0x26>
 8006af2:	f04f 34ff 	mov.w	r4, #4294967295
 8006af6:	4620      	mov	r0, r4
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d0f8      	beq.n	8006af6 <sbrk_aligned+0x22>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fc92 	bl	8007430 <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d1f2      	bne.n	8006af6 <sbrk_aligned+0x22>
 8006b10:	e7ef      	b.n	8006af2 <sbrk_aligned+0x1e>
 8006b12:	bf00      	nop
 8006b14:	2000446c 	.word	0x2000446c

08006b18 <_malloc_r>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	1ccd      	adds	r5, r1, #3
 8006b1e:	f025 0503 	bic.w	r5, r5, #3
 8006b22:	3508      	adds	r5, #8
 8006b24:	2d0c      	cmp	r5, #12
 8006b26:	bf38      	it	cc
 8006b28:	250c      	movcc	r5, #12
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	db01      	blt.n	8006b34 <_malloc_r+0x1c>
 8006b30:	42a9      	cmp	r1, r5
 8006b32:	d904      	bls.n	8006b3e <_malloc_r+0x26>
 8006b34:	230c      	movs	r3, #12
 8006b36:	6033      	str	r3, [r6, #0]
 8006b38:	2000      	movs	r0, #0
 8006b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c14 <_malloc_r+0xfc>
 8006b42:	f000 f869 	bl	8006c18 <__malloc_lock>
 8006b46:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	bb44      	cbnz	r4, 8006ba0 <_malloc_r+0x88>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffbf 	bl	8006ad4 <sbrk_aligned>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	4604      	mov	r4, r0
 8006b5a:	d158      	bne.n	8006c0e <_malloc_r+0xf6>
 8006b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b60:	4627      	mov	r7, r4
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	d143      	bne.n	8006bee <_malloc_r+0xd6>
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	d04b      	beq.n	8006c02 <_malloc_r+0xea>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4630      	mov	r0, r6
 8006b70:	eb04 0903 	add.w	r9, r4, r3
 8006b74:	f000 fc5c 	bl	8007430 <_sbrk_r>
 8006b78:	4581      	cmp	r9, r0
 8006b7a:	d142      	bne.n	8006c02 <_malloc_r+0xea>
 8006b7c:	6821      	ldr	r1, [r4, #0]
 8006b7e:	1a6d      	subs	r5, r5, r1
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ffa6 	bl	8006ad4 <sbrk_aligned>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d03a      	beq.n	8006c02 <_malloc_r+0xea>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	442b      	add	r3, r5
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	f8d8 3000 	ldr.w	r3, [r8]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	bb62      	cbnz	r2, 8006bf4 <_malloc_r+0xdc>
 8006b9a:	f8c8 7000 	str.w	r7, [r8]
 8006b9e:	e00f      	b.n	8006bc0 <_malloc_r+0xa8>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	1b52      	subs	r2, r2, r5
 8006ba4:	d420      	bmi.n	8006be8 <_malloc_r+0xd0>
 8006ba6:	2a0b      	cmp	r2, #11
 8006ba8:	d917      	bls.n	8006bda <_malloc_r+0xc2>
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	bf18      	it	ne
 8006bb2:	6059      	strne	r1, [r3, #4]
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	bf08      	it	eq
 8006bb8:	f8c8 1000 	streq.w	r1, [r8]
 8006bbc:	5162      	str	r2, [r4, r5]
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f82f 	bl	8006c24 <__malloc_unlock>
 8006bc6:	f104 000b 	add.w	r0, r4, #11
 8006bca:	1d23      	adds	r3, r4, #4
 8006bcc:	f020 0007 	bic.w	r0, r0, #7
 8006bd0:	1ac2      	subs	r2, r0, r3
 8006bd2:	bf1c      	itt	ne
 8006bd4:	1a1b      	subne	r3, r3, r0
 8006bd6:	50a3      	strne	r3, [r4, r2]
 8006bd8:	e7af      	b.n	8006b3a <_malloc_r+0x22>
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	bf0c      	ite	eq
 8006be0:	f8c8 2000 	streq.w	r2, [r8]
 8006be4:	605a      	strne	r2, [r3, #4]
 8006be6:	e7eb      	b.n	8006bc0 <_malloc_r+0xa8>
 8006be8:	4623      	mov	r3, r4
 8006bea:	6864      	ldr	r4, [r4, #4]
 8006bec:	e7ae      	b.n	8006b4c <_malloc_r+0x34>
 8006bee:	463c      	mov	r4, r7
 8006bf0:	687f      	ldr	r7, [r7, #4]
 8006bf2:	e7b6      	b.n	8006b62 <_malloc_r+0x4a>
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d1fb      	bne.n	8006bf4 <_malloc_r+0xdc>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	e7de      	b.n	8006bc0 <_malloc_r+0xa8>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 f80c 	bl	8006c24 <__malloc_unlock>
 8006c0c:	e794      	b.n	8006b38 <_malloc_r+0x20>
 8006c0e:	6005      	str	r5, [r0, #0]
 8006c10:	e7d6      	b.n	8006bc0 <_malloc_r+0xa8>
 8006c12:	bf00      	nop
 8006c14:	20004470 	.word	0x20004470

08006c18 <__malloc_lock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__malloc_lock+0x8>)
 8006c1a:	f7ff bf0e 	b.w	8006a3a <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20004468 	.word	0x20004468

08006c24 <__malloc_unlock>:
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <__malloc_unlock+0x8>)
 8006c26:	f7ff bf09 	b.w	8006a3c <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20004468 	.word	0x20004468

08006c30 <__sfputc_r>:
 8006c30:	6893      	ldr	r3, [r2, #8]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	b410      	push	{r4}
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	da08      	bge.n	8006c4e <__sfputc_r+0x1e>
 8006c3c:	6994      	ldr	r4, [r2, #24]
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	db01      	blt.n	8006c46 <__sfputc_r+0x16>
 8006c42:	290a      	cmp	r1, #10
 8006c44:	d103      	bne.n	8006c4e <__sfputc_r+0x1e>
 8006c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c4a:	f7ff bde8 	b.w	800681e <__swbuf_r>
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	1c58      	adds	r0, r3, #1
 8006c52:	6010      	str	r0, [r2, #0]
 8006c54:	7019      	strb	r1, [r3, #0]
 8006c56:	4608      	mov	r0, r1
 8006c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <__sfputs_r>:
 8006c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c60:	4606      	mov	r6, r0
 8006c62:	460f      	mov	r7, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	18d5      	adds	r5, r2, r3
 8006c68:	42ac      	cmp	r4, r5
 8006c6a:	d101      	bne.n	8006c70 <__sfputs_r+0x12>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e007      	b.n	8006c80 <__sfputs_r+0x22>
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	463a      	mov	r2, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffda 	bl	8006c30 <__sfputc_r>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d1f3      	bne.n	8006c68 <__sfputs_r+0xa>
 8006c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c84 <_vfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	460d      	mov	r5, r1
 8006c8a:	b09d      	sub	sp, #116	@ 0x74
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	4698      	mov	r8, r3
 8006c90:	4606      	mov	r6, r0
 8006c92:	b118      	cbz	r0, 8006c9c <_vfiprintf_r+0x18>
 8006c94:	6a03      	ldr	r3, [r0, #32]
 8006c96:	b90b      	cbnz	r3, 8006c9c <_vfiprintf_r+0x18>
 8006c98:	f7ff fcd8 	bl	800664c <__sinit>
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x2a>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x2a>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006caa:	f7ff fec6 	bl	8006a3a <__retarget_lock_acquire_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	071b      	lsls	r3, r3, #28
 8006cb2:	d501      	bpl.n	8006cb8 <_vfiprintf_r+0x34>
 8006cb4:	692b      	ldr	r3, [r5, #16]
 8006cb6:	b99b      	cbnz	r3, 8006ce0 <_vfiprintf_r+0x5c>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7ff fdee 	bl	800689c <__swsetup_r>
 8006cc0:	b170      	cbz	r0, 8006ce0 <_vfiprintf_r+0x5c>
 8006cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc4:	07dc      	lsls	r4, r3, #31
 8006cc6:	d504      	bpl.n	8006cd2 <_vfiprintf_r+0x4e>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b01d      	add	sp, #116	@ 0x74
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d4f7      	bmi.n	8006cc8 <_vfiprintf_r+0x44>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cda:	f7ff feaf 	bl	8006a3c <__retarget_lock_release_recursive>
 8006cde:	e7f3      	b.n	8006cc8 <_vfiprintf_r+0x44>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cee:	2330      	movs	r3, #48	@ 0x30
 8006cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ea0 <_vfiprintf_r+0x21c>
 8006cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cf8:	f04f 0901 	mov.w	r9, #1
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	469a      	mov	sl, r3
 8006d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d04:	b10a      	cbz	r2, 8006d0a <_vfiprintf_r+0x86>
 8006d06:	2a25      	cmp	r2, #37	@ 0x25
 8006d08:	d1f9      	bne.n	8006cfe <_vfiprintf_r+0x7a>
 8006d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d0e:	d00b      	beq.n	8006d28 <_vfiprintf_r+0xa4>
 8006d10:	465b      	mov	r3, fp
 8006d12:	4622      	mov	r2, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ffa1 	bl	8006c5e <__sfputs_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f000 80a7 	beq.w	8006e70 <_vfiprintf_r+0x1ec>
 8006d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d24:	445a      	add	r2, fp
 8006d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 809f 	beq.w	8006e70 <_vfiprintf_r+0x1ec>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d3c:	f10a 0a01 	add.w	sl, sl, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d4a:	4654      	mov	r4, sl
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d52:	4853      	ldr	r0, [pc, #332]	@ (8006ea0 <_vfiprintf_r+0x21c>)
 8006d54:	f7f9 fa54 	bl	8000200 <memchr>
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	b9d8      	cbnz	r0, 8006d94 <_vfiprintf_r+0x110>
 8006d5c:	06d1      	lsls	r1, r2, #27
 8006d5e:	bf44      	itt	mi
 8006d60:	2320      	movmi	r3, #32
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d66:	0713      	lsls	r3, r2, #28
 8006d68:	bf44      	itt	mi
 8006d6a:	232b      	movmi	r3, #43	@ 0x2b
 8006d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d70:	f89a 3000 	ldrb.w	r3, [sl]
 8006d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d76:	d015      	beq.n	8006da4 <_vfiprintf_r+0x120>
 8006d78:	9a07      	ldr	r2, [sp, #28]
 8006d7a:	4654      	mov	r4, sl
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f04f 0c0a 	mov.w	ip, #10
 8006d82:	4621      	mov	r1, r4
 8006d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d88:	3b30      	subs	r3, #48	@ 0x30
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d94b      	bls.n	8006e26 <_vfiprintf_r+0x1a2>
 8006d8e:	b1b0      	cbz	r0, 8006dbe <_vfiprintf_r+0x13a>
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	e014      	b.n	8006dbe <_vfiprintf_r+0x13a>
 8006d94:	eba0 0308 	sub.w	r3, r0, r8
 8006d98:	fa09 f303 	lsl.w	r3, r9, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	46a2      	mov	sl, r4
 8006da2:	e7d2      	b.n	8006d4a <_vfiprintf_r+0xc6>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	1d19      	adds	r1, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	9103      	str	r1, [sp, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbb      	ittet	lt
 8006db0:	425b      	neglt	r3, r3
 8006db2:	f042 0202 	orrlt.w	r2, r2, #2
 8006db6:	9307      	strge	r3, [sp, #28]
 8006db8:	9307      	strlt	r3, [sp, #28]
 8006dba:	bfb8      	it	lt
 8006dbc:	9204      	strlt	r2, [sp, #16]
 8006dbe:	7823      	ldrb	r3, [r4, #0]
 8006dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dc2:	d10a      	bne.n	8006dda <_vfiprintf_r+0x156>
 8006dc4:	7863      	ldrb	r3, [r4, #1]
 8006dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc8:	d132      	bne.n	8006e30 <_vfiprintf_r+0x1ac>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9203      	str	r2, [sp, #12]
 8006dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dd6:	3402      	adds	r4, #2
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006eb0 <_vfiprintf_r+0x22c>
 8006dde:	7821      	ldrb	r1, [r4, #0]
 8006de0:	2203      	movs	r2, #3
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7f9 fa0c 	bl	8000200 <memchr>
 8006de8:	b138      	cbz	r0, 8006dfa <_vfiprintf_r+0x176>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	eba0 000a 	sub.w	r0, r0, sl
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	4082      	lsls	r2, r0
 8006df4:	4313      	orrs	r3, r2
 8006df6:	3401      	adds	r4, #1
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfe:	4829      	ldr	r0, [pc, #164]	@ (8006ea4 <_vfiprintf_r+0x220>)
 8006e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e04:	2206      	movs	r2, #6
 8006e06:	f7f9 f9fb 	bl	8000200 <memchr>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d03f      	beq.n	8006e8e <_vfiprintf_r+0x20a>
 8006e0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ea8 <_vfiprintf_r+0x224>)
 8006e10:	bb1b      	cbnz	r3, 8006e5a <_vfiprintf_r+0x1d6>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	3307      	adds	r3, #7
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	9303      	str	r3, [sp, #12]
 8006e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e20:	443b      	add	r3, r7
 8006e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e24:	e76a      	b.n	8006cfc <_vfiprintf_r+0x78>
 8006e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	e7a8      	b.n	8006d82 <_vfiprintf_r+0xfe>
 8006e30:	2300      	movs	r3, #0
 8006e32:	3401      	adds	r4, #1
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	4619      	mov	r1, r3
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e42:	3a30      	subs	r2, #48	@ 0x30
 8006e44:	2a09      	cmp	r2, #9
 8006e46:	d903      	bls.n	8006e50 <_vfiprintf_r+0x1cc>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0c6      	beq.n	8006dda <_vfiprintf_r+0x156>
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	e7c4      	b.n	8006dda <_vfiprintf_r+0x156>
 8006e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e54:	4604      	mov	r4, r0
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7f0      	b.n	8006e3c <_vfiprintf_r+0x1b8>
 8006e5a:	ab03      	add	r3, sp, #12
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <_vfiprintf_r+0x228>)
 8006e62:	a904      	add	r1, sp, #16
 8006e64:	4630      	mov	r0, r6
 8006e66:	f3af 8000 	nop.w
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	1c78      	adds	r0, r7, #1
 8006e6e:	d1d6      	bne.n	8006e1e <_vfiprintf_r+0x19a>
 8006e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	d405      	bmi.n	8006e82 <_vfiprintf_r+0x1fe>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d402      	bmi.n	8006e82 <_vfiprintf_r+0x1fe>
 8006e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e7e:	f7ff fddd 	bl	8006a3c <__retarget_lock_release_recursive>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	065b      	lsls	r3, r3, #25
 8006e86:	f53f af1f 	bmi.w	8006cc8 <_vfiprintf_r+0x44>
 8006e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e8c:	e71e      	b.n	8006ccc <_vfiprintf_r+0x48>
 8006e8e:	ab03      	add	r3, sp, #12
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	462a      	mov	r2, r5
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <_vfiprintf_r+0x228>)
 8006e96:	a904      	add	r1, sp, #16
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f879 	bl	8006f90 <_printf_i>
 8006e9e:	e7e4      	b.n	8006e6a <_vfiprintf_r+0x1e6>
 8006ea0:	0800761c 	.word	0x0800761c
 8006ea4:	08007626 	.word	0x08007626
 8006ea8:	00000000 	.word	0x00000000
 8006eac:	08006c5f 	.word	0x08006c5f
 8006eb0:	08007622 	.word	0x08007622

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4616      	mov	r6, r2
 8006eba:	4698      	mov	r8, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b10a      	cbz	r2, 8006eda <_printf_common+0x26>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	6833      	ldrmi	r3, [r6, #0]
 8006ee2:	3302      	addmi	r3, #2
 8006ee4:	6033      	strmi	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	f015 0506 	ands.w	r5, r5, #6
 8006eec:	d106      	bne.n	8006efc <_printf_common+0x48>
 8006eee:	f104 0a19 	add.w	sl, r4, #25
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6832      	ldr	r2, [r6, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc26      	bgt.n	8006f4a <_printf_common+0x96>
 8006efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	3b00      	subs	r3, #0
 8006f04:	bf18      	it	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	0692      	lsls	r2, r2, #26
 8006f0a:	d42b      	bmi.n	8006f64 <_printf_common+0xb0>
 8006f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d01e      	beq.n	8006f58 <_printf_common+0xa4>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	bf02      	ittt	eq
 8006f26:	68e5      	ldreq	r5, [r4, #12]
 8006f28:	6833      	ldreq	r3, [r6, #0]
 8006f2a:	1aed      	subeq	r5, r5, r3
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	bf0c      	ite	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	2500      	movne	r5, #0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bfc4      	itt	gt
 8006f3a:	1a9b      	subgt	r3, r3, r2
 8006f3c:	18ed      	addgt	r5, r5, r3
 8006f3e:	2600      	movs	r6, #0
 8006f40:	341a      	adds	r4, #26
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	d11a      	bne.n	8006f7c <_printf_common+0xc8>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e008      	b.n	8006f5c <_printf_common+0xa8>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	4641      	mov	r1, r8
 8006f50:	4638      	mov	r0, r7
 8006f52:	47c8      	blx	r9
 8006f54:	3001      	adds	r0, #1
 8006f56:	d103      	bne.n	8006f60 <_printf_common+0xac>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7c6      	b.n	8006ef2 <_printf_common+0x3e>
 8006f64:	18e1      	adds	r1, r4, r3
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	2030      	movs	r0, #48	@ 0x30
 8006f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f6e:	4422      	add	r2, r4
 8006f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f78:	3302      	adds	r3, #2
 8006f7a:	e7c7      	b.n	8006f0c <_printf_common+0x58>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4641      	mov	r1, r8
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0e6      	beq.n	8006f58 <_printf_common+0xa4>
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7d9      	b.n	8006f42 <_printf_common+0x8e>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	7e0f      	ldrb	r7, [r1, #24]
 8006f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f98:	2f78      	cmp	r7, #120	@ 0x78
 8006f9a:	4691      	mov	r9, r2
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fa6:	d807      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fa8:	2f62      	cmp	r7, #98	@ 0x62
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x32>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80d2 	beq.w	8007156 <_printf_i+0x1c6>
 8006fb2:	2f58      	cmp	r7, #88	@ 0x58
 8006fb4:	f000 80b9 	beq.w	800712a <_printf_i+0x19a>
 8006fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fc0:	e03a      	b.n	8007038 <_printf_i+0xa8>
 8006fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fc6:	2b15      	cmp	r3, #21
 8006fc8:	d8f6      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fca:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd0 <_printf_i+0x40>)
 8006fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	08006fb9 	.word	0x08006fb9
 8006fdc:	08006fb9 	.word	0x08006fb9
 8006fe0:	08006fb9 	.word	0x08006fb9
 8006fe4:	08006fb9 	.word	0x08006fb9
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006fb9 	.word	0x08006fb9
 8006ff0:	08006fb9 	.word	0x08006fb9
 8006ff4:	08006fb9 	.word	0x08006fb9
 8006ff8:	08006fb9 	.word	0x08006fb9
 8006ffc:	0800713d 	.word	0x0800713d
 8007000:	08007067 	.word	0x08007067
 8007004:	080070f7 	.word	0x080070f7
 8007008:	08006fb9 	.word	0x08006fb9
 800700c:	08006fb9 	.word	0x08006fb9
 8007010:	0800715f 	.word	0x0800715f
 8007014:	08006fb9 	.word	0x08006fb9
 8007018:	08007067 	.word	0x08007067
 800701c:	08006fb9 	.word	0x08006fb9
 8007020:	08006fb9 	.word	0x08006fb9
 8007024:	080070ff 	.word	0x080070ff
 8007028:	6833      	ldr	r3, [r6, #0]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6032      	str	r2, [r6, #0]
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007038:	2301      	movs	r3, #1
 800703a:	e09d      	b.n	8007178 <_printf_i+0x1e8>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	6820      	ldr	r0, [r4, #0]
 8007040:	1d19      	adds	r1, r3, #4
 8007042:	6031      	str	r1, [r6, #0]
 8007044:	0606      	lsls	r6, r0, #24
 8007046:	d501      	bpl.n	800704c <_printf_i+0xbc>
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	e003      	b.n	8007054 <_printf_i+0xc4>
 800704c:	0645      	lsls	r5, r0, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0xb8>
 8007050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007054:	2d00      	cmp	r5, #0
 8007056:	da03      	bge.n	8007060 <_printf_i+0xd0>
 8007058:	232d      	movs	r3, #45	@ 0x2d
 800705a:	426d      	negs	r5, r5
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007060:	4859      	ldr	r0, [pc, #356]	@ (80071c8 <_printf_i+0x238>)
 8007062:	230a      	movs	r3, #10
 8007064:	e011      	b.n	800708a <_printf_i+0xfa>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	6833      	ldr	r3, [r6, #0]
 800706a:	0608      	lsls	r0, r1, #24
 800706c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0xe8>
 8007072:	0649      	lsls	r1, r1, #25
 8007074:	bf48      	it	mi
 8007076:	b2ad      	uxthmi	r5, r5
 8007078:	2f6f      	cmp	r7, #111	@ 0x6f
 800707a:	4853      	ldr	r0, [pc, #332]	@ (80071c8 <_printf_i+0x238>)
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	bf14      	ite	ne
 8007080:	230a      	movne	r3, #10
 8007082:	2308      	moveq	r3, #8
 8007084:	2100      	movs	r1, #0
 8007086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800708a:	6866      	ldr	r6, [r4, #4]
 800708c:	60a6      	str	r6, [r4, #8]
 800708e:	2e00      	cmp	r6, #0
 8007090:	bfa2      	ittt	ge
 8007092:	6821      	ldrge	r1, [r4, #0]
 8007094:	f021 0104 	bicge.w	r1, r1, #4
 8007098:	6021      	strge	r1, [r4, #0]
 800709a:	b90d      	cbnz	r5, 80070a0 <_printf_i+0x110>
 800709c:	2e00      	cmp	r6, #0
 800709e:	d04b      	beq.n	8007138 <_printf_i+0x1a8>
 80070a0:	4616      	mov	r6, r2
 80070a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80070a6:	fb03 5711 	mls	r7, r3, r1, r5
 80070aa:	5dc7      	ldrb	r7, [r0, r7]
 80070ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070b0:	462f      	mov	r7, r5
 80070b2:	42bb      	cmp	r3, r7
 80070b4:	460d      	mov	r5, r1
 80070b6:	d9f4      	bls.n	80070a2 <_printf_i+0x112>
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d10b      	bne.n	80070d4 <_printf_i+0x144>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	07df      	lsls	r7, r3, #31
 80070c0:	d508      	bpl.n	80070d4 <_printf_i+0x144>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	6861      	ldr	r1, [r4, #4]
 80070c6:	4299      	cmp	r1, r3
 80070c8:	bfde      	ittt	le
 80070ca:	2330      	movle	r3, #48	@ 0x30
 80070cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070d4:	1b92      	subs	r2, r2, r6
 80070d6:	6122      	str	r2, [r4, #16]
 80070d8:	f8cd a000 	str.w	sl, [sp]
 80070dc:	464b      	mov	r3, r9
 80070de:	aa03      	add	r2, sp, #12
 80070e0:	4621      	mov	r1, r4
 80070e2:	4640      	mov	r0, r8
 80070e4:	f7ff fee6 	bl	8006eb4 <_printf_common>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d14a      	bne.n	8007182 <_printf_i+0x1f2>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	b004      	add	sp, #16
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	f043 0320 	orr.w	r3, r3, #32
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	4833      	ldr	r0, [pc, #204]	@ (80071cc <_printf_i+0x23c>)
 8007100:	2778      	movs	r7, #120	@ 0x78
 8007102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	6831      	ldr	r1, [r6, #0]
 800710a:	061f      	lsls	r7, r3, #24
 800710c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007110:	d402      	bmi.n	8007118 <_printf_i+0x188>
 8007112:	065f      	lsls	r7, r3, #25
 8007114:	bf48      	it	mi
 8007116:	b2ad      	uxthmi	r5, r5
 8007118:	6031      	str	r1, [r6, #0]
 800711a:	07d9      	lsls	r1, r3, #31
 800711c:	bf44      	itt	mi
 800711e:	f043 0320 	orrmi.w	r3, r3, #32
 8007122:	6023      	strmi	r3, [r4, #0]
 8007124:	b11d      	cbz	r5, 800712e <_printf_i+0x19e>
 8007126:	2310      	movs	r3, #16
 8007128:	e7ac      	b.n	8007084 <_printf_i+0xf4>
 800712a:	4827      	ldr	r0, [pc, #156]	@ (80071c8 <_printf_i+0x238>)
 800712c:	e7e9      	b.n	8007102 <_printf_i+0x172>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	f023 0320 	bic.w	r3, r3, #32
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	e7f6      	b.n	8007126 <_printf_i+0x196>
 8007138:	4616      	mov	r6, r2
 800713a:	e7bd      	b.n	80070b8 <_printf_i+0x128>
 800713c:	6833      	ldr	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	6961      	ldr	r1, [r4, #20]
 8007142:	1d18      	adds	r0, r3, #4
 8007144:	6030      	str	r0, [r6, #0]
 8007146:	062e      	lsls	r6, r5, #24
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	d501      	bpl.n	8007150 <_printf_i+0x1c0>
 800714c:	6019      	str	r1, [r3, #0]
 800714e:	e002      	b.n	8007156 <_printf_i+0x1c6>
 8007150:	0668      	lsls	r0, r5, #25
 8007152:	d5fb      	bpl.n	800714c <_printf_i+0x1bc>
 8007154:	8019      	strh	r1, [r3, #0]
 8007156:	2300      	movs	r3, #0
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	4616      	mov	r6, r2
 800715c:	e7bc      	b.n	80070d8 <_printf_i+0x148>
 800715e:	6833      	ldr	r3, [r6, #0]
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	6032      	str	r2, [r6, #0]
 8007164:	681e      	ldr	r6, [r3, #0]
 8007166:	6862      	ldr	r2, [r4, #4]
 8007168:	2100      	movs	r1, #0
 800716a:	4630      	mov	r0, r6
 800716c:	f7f9 f848 	bl	8000200 <memchr>
 8007170:	b108      	cbz	r0, 8007176 <_printf_i+0x1e6>
 8007172:	1b80      	subs	r0, r0, r6
 8007174:	6060      	str	r0, [r4, #4]
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	2300      	movs	r3, #0
 800717c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007180:	e7aa      	b.n	80070d8 <_printf_i+0x148>
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	4632      	mov	r2, r6
 8007186:	4649      	mov	r1, r9
 8007188:	4640      	mov	r0, r8
 800718a:	47d0      	blx	sl
 800718c:	3001      	adds	r0, #1
 800718e:	d0ad      	beq.n	80070ec <_printf_i+0x15c>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	079b      	lsls	r3, r3, #30
 8007194:	d413      	bmi.n	80071be <_printf_i+0x22e>
 8007196:	68e0      	ldr	r0, [r4, #12]
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	4298      	cmp	r0, r3
 800719c:	bfb8      	it	lt
 800719e:	4618      	movlt	r0, r3
 80071a0:	e7a6      	b.n	80070f0 <_printf_i+0x160>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4632      	mov	r2, r6
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	47d0      	blx	sl
 80071ac:	3001      	adds	r0, #1
 80071ae:	d09d      	beq.n	80070ec <_printf_i+0x15c>
 80071b0:	3501      	adds	r5, #1
 80071b2:	68e3      	ldr	r3, [r4, #12]
 80071b4:	9903      	ldr	r1, [sp, #12]
 80071b6:	1a5b      	subs	r3, r3, r1
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dcf2      	bgt.n	80071a2 <_printf_i+0x212>
 80071bc:	e7eb      	b.n	8007196 <_printf_i+0x206>
 80071be:	2500      	movs	r5, #0
 80071c0:	f104 0619 	add.w	r6, r4, #25
 80071c4:	e7f5      	b.n	80071b2 <_printf_i+0x222>
 80071c6:	bf00      	nop
 80071c8:	0800762d 	.word	0x0800762d
 80071cc:	0800763e 	.word	0x0800763e

080071d0 <__sflush_r>:
 80071d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	0716      	lsls	r6, r2, #28
 80071da:	4605      	mov	r5, r0
 80071dc:	460c      	mov	r4, r1
 80071de:	d454      	bmi.n	800728a <__sflush_r+0xba>
 80071e0:	684b      	ldr	r3, [r1, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dc02      	bgt.n	80071ec <__sflush_r+0x1c>
 80071e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dd48      	ble.n	800727e <__sflush_r+0xae>
 80071ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d045      	beq.n	800727e <__sflush_r+0xae>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071f8:	682f      	ldr	r7, [r5, #0]
 80071fa:	6a21      	ldr	r1, [r4, #32]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	d030      	beq.n	8007262 <__sflush_r+0x92>
 8007200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	0759      	lsls	r1, r3, #29
 8007206:	d505      	bpl.n	8007214 <__sflush_r+0x44>
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800720e:	b10b      	cbz	r3, 8007214 <__sflush_r+0x44>
 8007210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	2300      	movs	r3, #0
 8007216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007218:	6a21      	ldr	r1, [r4, #32]
 800721a:	4628      	mov	r0, r5
 800721c:	47b0      	blx	r6
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	d106      	bne.n	8007232 <__sflush_r+0x62>
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	291d      	cmp	r1, #29
 8007228:	d82b      	bhi.n	8007282 <__sflush_r+0xb2>
 800722a:	4a2a      	ldr	r2, [pc, #168]	@ (80072d4 <__sflush_r+0x104>)
 800722c:	410a      	asrs	r2, r1
 800722e:	07d6      	lsls	r6, r2, #31
 8007230:	d427      	bmi.n	8007282 <__sflush_r+0xb2>
 8007232:	2200      	movs	r2, #0
 8007234:	6062      	str	r2, [r4, #4]
 8007236:	04d9      	lsls	r1, r3, #19
 8007238:	6922      	ldr	r2, [r4, #16]
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	d504      	bpl.n	8007248 <__sflush_r+0x78>
 800723e:	1c42      	adds	r2, r0, #1
 8007240:	d101      	bne.n	8007246 <__sflush_r+0x76>
 8007242:	682b      	ldr	r3, [r5, #0]
 8007244:	b903      	cbnz	r3, 8007248 <__sflush_r+0x78>
 8007246:	6560      	str	r0, [r4, #84]	@ 0x54
 8007248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800724a:	602f      	str	r7, [r5, #0]
 800724c:	b1b9      	cbz	r1, 800727e <__sflush_r+0xae>
 800724e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007252:	4299      	cmp	r1, r3
 8007254:	d002      	beq.n	800725c <__sflush_r+0x8c>
 8007256:	4628      	mov	r0, r5
 8007258:	f7ff fbf2 	bl	8006a40 <_free_r>
 800725c:	2300      	movs	r3, #0
 800725e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007260:	e00d      	b.n	800727e <__sflush_r+0xae>
 8007262:	2301      	movs	r3, #1
 8007264:	4628      	mov	r0, r5
 8007266:	47b0      	blx	r6
 8007268:	4602      	mov	r2, r0
 800726a:	1c50      	adds	r0, r2, #1
 800726c:	d1c9      	bne.n	8007202 <__sflush_r+0x32>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0c6      	beq.n	8007202 <__sflush_r+0x32>
 8007274:	2b1d      	cmp	r3, #29
 8007276:	d001      	beq.n	800727c <__sflush_r+0xac>
 8007278:	2b16      	cmp	r3, #22
 800727a:	d11e      	bne.n	80072ba <__sflush_r+0xea>
 800727c:	602f      	str	r7, [r5, #0]
 800727e:	2000      	movs	r0, #0
 8007280:	e022      	b.n	80072c8 <__sflush_r+0xf8>
 8007282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007286:	b21b      	sxth	r3, r3
 8007288:	e01b      	b.n	80072c2 <__sflush_r+0xf2>
 800728a:	690f      	ldr	r7, [r1, #16]
 800728c:	2f00      	cmp	r7, #0
 800728e:	d0f6      	beq.n	800727e <__sflush_r+0xae>
 8007290:	0793      	lsls	r3, r2, #30
 8007292:	680e      	ldr	r6, [r1, #0]
 8007294:	bf08      	it	eq
 8007296:	694b      	ldreq	r3, [r1, #20]
 8007298:	600f      	str	r7, [r1, #0]
 800729a:	bf18      	it	ne
 800729c:	2300      	movne	r3, #0
 800729e:	eba6 0807 	sub.w	r8, r6, r7
 80072a2:	608b      	str	r3, [r1, #8]
 80072a4:	f1b8 0f00 	cmp.w	r8, #0
 80072a8:	dde9      	ble.n	800727e <__sflush_r+0xae>
 80072aa:	6a21      	ldr	r1, [r4, #32]
 80072ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072ae:	4643      	mov	r3, r8
 80072b0:	463a      	mov	r2, r7
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b0      	blx	r6
 80072b6:	2800      	cmp	r0, #0
 80072b8:	dc08      	bgt.n	80072cc <__sflush_r+0xfc>
 80072ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	4407      	add	r7, r0
 80072ce:	eba8 0800 	sub.w	r8, r8, r0
 80072d2:	e7e7      	b.n	80072a4 <__sflush_r+0xd4>
 80072d4:	dfbffffe 	.word	0xdfbffffe

080072d8 <_fflush_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b913      	cbnz	r3, 80072e8 <_fflush_r+0x10>
 80072e2:	2500      	movs	r5, #0
 80072e4:	4628      	mov	r0, r5
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	b118      	cbz	r0, 80072f2 <_fflush_r+0x1a>
 80072ea:	6a03      	ldr	r3, [r0, #32]
 80072ec:	b90b      	cbnz	r3, 80072f2 <_fflush_r+0x1a>
 80072ee:	f7ff f9ad 	bl	800664c <__sinit>
 80072f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f3      	beq.n	80072e2 <_fflush_r+0xa>
 80072fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d404      	bmi.n	800730a <_fflush_r+0x32>
 8007300:	0599      	lsls	r1, r3, #22
 8007302:	d402      	bmi.n	800730a <_fflush_r+0x32>
 8007304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007306:	f7ff fb98 	bl	8006a3a <__retarget_lock_acquire_recursive>
 800730a:	4628      	mov	r0, r5
 800730c:	4621      	mov	r1, r4
 800730e:	f7ff ff5f 	bl	80071d0 <__sflush_r>
 8007312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007314:	07da      	lsls	r2, r3, #31
 8007316:	4605      	mov	r5, r0
 8007318:	d4e4      	bmi.n	80072e4 <_fflush_r+0xc>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	059b      	lsls	r3, r3, #22
 800731e:	d4e1      	bmi.n	80072e4 <_fflush_r+0xc>
 8007320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007322:	f7ff fb8b 	bl	8006a3c <__retarget_lock_release_recursive>
 8007326:	e7dd      	b.n	80072e4 <_fflush_r+0xc>

08007328 <__swhatbuf_r>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	2900      	cmp	r1, #0
 8007332:	b096      	sub	sp, #88	@ 0x58
 8007334:	4615      	mov	r5, r2
 8007336:	461e      	mov	r6, r3
 8007338:	da0d      	bge.n	8007356 <__swhatbuf_r+0x2e>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	bf14      	ite	ne
 8007346:	2340      	movne	r3, #64	@ 0x40
 8007348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800734c:	2000      	movs	r0, #0
 800734e:	6031      	str	r1, [r6, #0]
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	b016      	add	sp, #88	@ 0x58
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	466a      	mov	r2, sp
 8007358:	f000 f848 	bl	80073ec <_fstat_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	dbec      	blt.n	800733a <__swhatbuf_r+0x12>
 8007360:	9901      	ldr	r1, [sp, #4]
 8007362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800736a:	4259      	negs	r1, r3
 800736c:	4159      	adcs	r1, r3
 800736e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007372:	e7eb      	b.n	800734c <__swhatbuf_r+0x24>

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffc8 	bl	8007328 <__swhatbuf_r>
 8007398:	9f00      	ldr	r7, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff fbba 	bl	8006b18 <_malloc_r>
 80073a4:	b948      	cbnz	r0, 80073ba <__smakebuf_r+0x46>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	059a      	lsls	r2, r3, #22
 80073ac:	d4ee      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	f043 0302 	orr.w	r3, r3, #2
 80073b6:	81a3      	strh	r3, [r4, #12]
 80073b8:	e7e2      	b.n	8007380 <__smakebuf_r+0xc>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	6020      	str	r0, [r4, #0]
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073ca:	b15b      	cbz	r3, 80073e4 <__smakebuf_r+0x70>
 80073cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f81d 	bl	8007410 <_isatty_r>
 80073d6:	b128      	cbz	r0, 80073e4 <__smakebuf_r+0x70>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	431d      	orrs	r5, r3
 80073e8:	81a5      	strh	r5, [r4, #12]
 80073ea:	e7cf      	b.n	800738c <__smakebuf_r+0x18>

080073ec <_fstat_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	@ (800740c <_fstat_r+0x20>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f7fa fbb0 	bl	8001b5e <_fstat>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d102      	bne.n	8007408 <_fstat_r+0x1c>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	b103      	cbz	r3, 8007408 <_fstat_r+0x1c>
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	bd38      	pop	{r3, r4, r5, pc}
 800740a:	bf00      	nop
 800740c:	20004464 	.word	0x20004464

08007410 <_isatty_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	@ (800742c <_isatty_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa fbaf 	bl	8001b7e <_isatty>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_isatty_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_isatty_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20004464 	.word	0x20004464

08007430 <_sbrk_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d06      	ldr	r5, [pc, #24]	@ (800744c <_sbrk_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	f7fa fbb8 	bl	8001bb0 <_sbrk>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_sbrk_r+0x1a>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_sbrk_r+0x1a>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20004464 	.word	0x20004464

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
